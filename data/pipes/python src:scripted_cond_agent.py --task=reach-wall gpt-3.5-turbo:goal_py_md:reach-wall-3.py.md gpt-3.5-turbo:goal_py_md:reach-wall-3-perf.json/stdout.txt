['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py.md
# reach-wall: reach to the target location with a short wall in the way
# def reach_wall(robot):
    # Steps:
    #  1. Check if gripper is blocked by wall
    #  2. Move gripper above target if blocked
    #  3. Move gripper towards target
    #  4. Check if gripper is blocked by wall
    #  5. Move gripper above target
    #  6. Move gripper towards target
    # We need to check if the gripper is blocked by the wall. If it is, move the
    # gripper above the target and attempt to reach for it again.
    if check("the robot's gripper is blocked by wall"):
        robot.move_gripper("above the reach target")
    if check("the robot's gripper is not near the reach target"):
        robot.move_gripper("near the reach target")
    # If the gripper is now blocked by the wall again, move it above the target
    # and then towards the target.
    if check("the robot's gripper is blocked by wall"):
        robot.move_gripper("above the reach target")
    if check("the robot's gripper is not near the reach target"):
        robot.move_gripper("near the reach target")
{'reach-wall': [("the robot's gripper is blocked by wall", "the robot's gripper is above the reach target"), ("the robot's gripper is not near the reach target", "the robot's gripper is near the reach target"), ("the robot's gripper is blocked by wall", "the robot's gripper is above the reach target"), ("the robot's gripper is not near the reach target", "the robot's gripper is near the reach target")]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is above wall", 'put the gripper above the puck'), ("the robot's gripper is not near the target location", 'put the gripper in front of the drawer'), ("the robot's gripper is above wall", 'put the gripper above the puck'), ("the robot's gripper is not near the target location", 'put the gripper in front of the drawer')], env_name='reach-wall', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is above wall", 'put the gripper above the puck'), ("the robot's gripper is not near the target location", 'put the gripper in front of the drawer'), ("the robot's gripper is above wall", 'put the gripper above the puck'), ("the robot's gripper is not near the target location", 'put the gripper in front of the drawer')], env_name='reach-wall', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is above wall", 'put the gripper above the puck'), ("the robot's gripper is not near the target location", 'put the gripper in front of the drawer'), ("the robot's gripper is above wall", 'put the gripper above the puck'), ("the robot's gripper is not near the target location", 'put the gripper in front of the drawer')], env_name='reach-wall', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.5847585761916649
Success rates:
{
 "reach-wall": 0.0
}
