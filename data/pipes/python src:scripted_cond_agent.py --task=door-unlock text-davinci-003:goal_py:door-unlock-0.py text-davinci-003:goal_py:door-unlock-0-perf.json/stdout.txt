['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py

    # Steps:
    #  1. Turn the dial clockwise
    #  2. Turn the dial 90 degrees
    #  3. Turn the dial counterclockwise
    # Put the gripper in front of the door handle.
    if check("the robot's gripper is not in front of the door handle"):
        robot.move_gripper("in front of the door handle")
    # We can turn the dial by turning the gripper.
    if check("the robot's gripper is in front of the door handle"):
        robot.turn_gripper("clockwise")
    # Turn the dial 90 degress.
    if check("the door handle is not at 90 degrees turned"):
        robot.turn_gripper("90 degrees")
    # Turn the dial counterclockwise.
    if check("the door handle is at 90 degrees turned"):
        robot.turn_gripper("counterclockwise")
{'door-unlock': [("the robot's gripper is not in front of the door handle", "the robot's gripper is in front of the door handle"), ("the robot's gripper is in front of the door handle", 'turn_gripper clockwise'), ('the door handle is not at 90 degrees turned', 'turn_gripper 90 degrees'), ('the door handle is at 90 degrees turned', 'turn_gripper counterclockwise')]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not in front of the door's lock", 'put the gripper in front of the drawer'), ("the robot's gripper is in front of the door's lock", 'put gripper above button'), ("the door's lock is not above the robot's gripper", 'put gripper above button'), ("the door's lock is not above the robot's gripper", 'put gripper around door handle')], env_name='door-unlock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not in front of the door's lock", 'put the gripper in front of the drawer'), ("the robot's gripper is in front of the door's lock", 'put gripper above button'), ("the door's lock is not above the robot's gripper", 'put gripper above button'), ("the door's lock is not above the robot's gripper", 'put gripper around door handle')], env_name='door-unlock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.26
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not in front of the door's lock", 'put the gripper in front of the drawer'), ("the robot's gripper is in front of the door's lock", 'put gripper above button'), ("the door's lock is not above the robot's gripper", 'put gripper above button'), ("the door's lock is not above the robot's gripper", 'put gripper around door handle')], env_name='door-unlock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 1.4259424990888465
Success rates:
{
 "door-unlock": 0.26
}
