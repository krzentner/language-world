['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py.md
# reach-wall: reach to the target location with a short wall in the way
# def reach_wall(robot):
    # Steps:
    #  1. Check if there is a wall blocking the way
    #  2. Use a side movement to go around the wall if it exists
    #  3. Reach towards the target
    # Check if there is a wall blocking the way to the target
    if check("there is a wall blocking the robot's path to the target"):
        # Move the robot to the left of the wall
        if check("the robot is not left of the wall"):
            robot.move_gripper("left of the wall")
        # Move the robot forward and to the right of the wall
        if check("the robot is not forward and right of the wall"):
            robot.move_gripper("forward and right of the wall")
    # Move the gripper towards the target now that the wall is out of the way
    if check("the robot's gripper is not near the reach target"):
        robot.move_gripper("near the reach target")
{'reach-wall': [('the robot is not left of the wall', "the robot's gripper is left of the wall"), ('the robot is not forward and right of the wall', "the robot's gripper is near forward and the robot's gripper is right of the wall"), ("the robot's gripper is not near the reach target", "the robot's gripper is near the reach target")]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not left of wall", 'put the gripper in front of the drawer'), ("the robot's gripper is not forward aligned with wall", 'put the gripper in front of the drawer'), ("the robot's gripper is not near the target location", 'put the gripper in front of the drawer')], env_name='reach-wall', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not left of wall", 'put the gripper in front of the drawer'), ("the robot's gripper is not forward aligned with wall", 'put the gripper in front of the drawer'), ("the robot's gripper is not near the target location", 'put the gripper in front of the drawer')], env_name='reach-wall', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not left of wall", 'put the gripper in front of the drawer'), ("the robot's gripper is not forward aligned with wall", 'put the gripper in front of the drawer'), ("the robot's gripper is not near the target location", 'put the gripper in front of the drawer')], env_name='reach-wall', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.5847585761916649
Success rates:
{
 "reach-wall": 0.0
}
