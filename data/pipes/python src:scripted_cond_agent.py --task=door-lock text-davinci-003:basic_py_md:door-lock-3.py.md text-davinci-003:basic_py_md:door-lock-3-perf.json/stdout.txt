['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py.md


Here's the program:

```
# door-lock: turn the dial on the door
# def door_lock(robot):
    if check("the robot's gripper is not near the door lock dial"):
        robot.reach("to door lock dial")
    if check("the robot's gripper is near the door lock dial and the robot's gripper is open"):
        robot.grab("door lock dial")
    if check("the robot's gripper is around the door lock dial and the door lock dial is rotated to the left"):
        robot.turn("door lock dial clockwise")
    if check("the robot's gripper is around the door lock dial and the door lock dial is rotated to the right"):
        robot.turn("door lock dial counter-clockwise")    
```
{'door-lock': [("the robot's gripper is not near the door lock dial", 'reach to door lock dial'), ("the robot's gripper is near the door lock dial and the robot's gripper is open", 'grab door lock dial'), ("the robot's gripper is around the door lock dial and the door lock dial is rotated to the left", 'turn door lock dial clockwise'), ("the robot's gripper is around the door lock dial and the door lock dial is rotated to the right", 'turn door lock dial counter-clockwise')]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not near the door's lock", 'reach to goal'), ("the robot's gripper is near the door's lock and the robot's gripper is open", 'grab peg'), ("the robot's gripper is around the door's lock and door's lock is not touching the table", 'insert peg into hole'), ("the robot's gripper is around the door's lock and door's lock is not touching the table", 'insert peg into hole')], env_name='door-lock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not near the door's lock", 'reach to goal'), ("the robot's gripper is near the door's lock and the robot's gripper is open", 'grab peg'), ("the robot's gripper is around the door's lock and door's lock is not touching the table", 'insert peg into hole'), ("the robot's gripper is around the door's lock and door's lock is not touching the table", 'insert peg into hole')], env_name='door-lock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not near the door's lock", 'reach to goal'), ("the robot's gripper is near the door's lock and the robot's gripper is open", 'grab peg'), ("the robot's gripper is around the door's lock and door's lock is not touching the table", 'insert peg into hole'), ("the robot's gripper is around the door's lock and door's lock is not touching the table", 'insert peg into hole')], env_name='door-lock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 1.6991704067887954
Success rates:
{
 "door-lock": 0.0
}
