['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py.md


Here's the program to perform the task `door_lock`:

```
# door-lock: turn the dial on the door
# def door_lock(robot):
    # Steps:
    #  1. Move the robot's gripper finish near the door lock
    #  2. Turn the dial of the door lock in the required direction
    # First, put the gripper near the door lock
    if check("the robot's gripper is not near door lock"):
        robot.move_gripper("near the door lock")
    # Once the gripper is near the door lock, align it with the lock, closing it
    # around the lock.
    if check("the robot's gripper is near door lock and the robot's gripper is not vertically aligned with door lock"):
        robot.move_gripper("vertically aligned with door lock", close_gripper=True)
    # Once the gripper is lined up with the door lock, turn the dial in the
    # required direction.
    if check("the robot's gripper is vertically aligned with the door lock"):
        robot.move_gripper("right or left of the door lock")
```
{'door-lock': [("the robot's gripper is not near door lock", "the robot's gripper is near the door lock"), ("the robot's gripper is near door lock and the robot's gripper is not vertically aligned with door lock", "the robot's gripper is vertically aligned with door lock and the robot's gripper is closed"), ("the robot's gripper is vertically aligned with the door lock", "the robot's gripper is right or left of the door lock")]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not near the door's lock", 'push the gripper into the puck'), ("the robot's gripper is near the door's lock and the robot's gripper is not vertically aligned with the door's lock", 'push the gripper into the puck'), ("the robot's gripper is vertically aligned with the door's lock", 'move gripper to left of window handle')], env_name='door-lock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not near the door's lock", 'push the gripper into the puck'), ("the robot's gripper is near the door's lock and the robot's gripper is not vertically aligned with the door's lock", 'push the gripper into the puck'), ("the robot's gripper is vertically aligned with the door's lock", 'move gripper to left of window handle')], env_name='door-lock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not near the door's lock", 'push the gripper into the puck'), ("the robot's gripper is near the door's lock and the robot's gripper is not vertically aligned with the door's lock", 'push the gripper into the puck'), ("the robot's gripper is vertically aligned with the door's lock", 'move gripper to left of window handle')], env_name='door-lock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.977422618710455
Success rates:
{
 "door-lock": 0.0
}
