['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py.md


Solution:

```
# lever-pull: rotate the lever up
# def lever_pull(robot):
    if check("the robot's gripper is not above the lever and the robot's gripper is not horizontally aligned with the lever"):
        robot.put("gripper above lever")
    if check("the robot's gripper is above the lever and the robot's gripper is not horizontally aligned with the lever"):
        robot.align("gripper horizontally to lever")
    if check("the robot's gripper is horizontally aligned with the lever and the robot's gripper is not around the lever"):
        robot.drop("gripper around lever")
    if check("the robot's gripper is around the lever"):
        robot.rotate("lever up")
```
{'lever-pull': [("the robot's gripper is not above the lever and the robot's gripper is not horizontally aligned with the lever", 'put gripper above lever'), ("the robot's gripper is above the lever and the robot's gripper is not horizontally aligned with the lever", 'align gripper horizontally to lever'), ("the robot's gripper is horizontally aligned with the lever and the robot's gripper is not around the lever", 'drop gripper around lever'), ("the robot's gripper is around the lever", 'rotate lever up')]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the lever and the robot's gripper is not horizontally aligned with the lever", 'put gripper above button'), ("the robot's gripper is above the lever and the robot's gripper is not horizontally aligned with the lever", 'push the gripper into the puck'), ("the robot's gripper is horizontally aligned with the lever and the robot's gripper is not around the lever", 'drop gripper around puck'), ("the robot's gripper is around the lever", 'grab peg')], env_name='lever-pull', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the lever and the robot's gripper is not horizontally aligned with the lever", 'put gripper above button'), ("the robot's gripper is above the lever and the robot's gripper is not horizontally aligned with the lever", 'push the gripper into the puck'), ("the robot's gripper is horizontally aligned with the lever and the robot's gripper is not around the lever", 'drop gripper around puck'), ("the robot's gripper is around the lever", 'grab peg')], env_name='lever-pull', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 1.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the lever and the robot's gripper is not horizontally aligned with the lever", 'put gripper above button'), ("the robot's gripper is above the lever and the robot's gripper is not horizontally aligned with the lever", 'push the gripper into the puck'), ("the robot's gripper is horizontally aligned with the lever and the robot's gripper is not around the lever", 'drop gripper around puck'), ("the robot's gripper is around the lever", 'grab peg')], env_name='lever-pull', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.4950579190489108
Success rates:
{
 "lever-pull": 1.0
}
