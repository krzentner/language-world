['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py
# Steps:
#  1. Put the gripper above the hammer
#  2. Grab the handle of the hammer with the gripper
#  3. Put the gripper above the nail
#  4. Grab the nail with the gripper
#  5. Line up the hammer above the nail
#  6. Move the hammer down towards the nail
#  7. Move the hammer up to hit the nail
#  8. Repeat steps 6 and 7 until the nail is fully inserted
# First, put the gripper above the hammer.
if check("the robot's gripper is not vertically aligned with the hammer handle"):
    robot.move_gripper("vertically aligned with the hammer handle")
# If the gripper is above the hammer, close the gripper around the hammer handle.
if check("the robot's gripper is above the hammer handle and the gripper is open"):
    robot.move_gripper("around the hammer handle")
# If the hammer is being held, move the gripper above the nail.
if check("the hammer handle is held by the gripper"):
    robot.move_gripper("vertically aligned with the nail")
# If the gripper is above the nail, grab the nail.
if check("the robot's gripper is above the nail and the gripper is open"):
    robot.move_gripper("around the nail")
# If the gripper is holding the nail and the hammer handle, move the hammer above
# the nail.
if check("the hammer handle is held by the gripper and the nail is held by the gripper"):
    robot.move_gripper("vertically aligned with the nail")
# If the gripper is above the nail and the hammer is above the nail, move the
# hammer down towards the nail.
if check("the robot's gripper is vertically aligned with the nail and the robot's gripper is above the nail"):
    robot.move_gripper("near the nail") # move the hammer down towards the nail
# If the hammer is near the nail, move it up to hit the nail.
if check("the robot's gripper is above the nail and the nail is held by the gripper"):
    robot.move_gripper("almost vertically aligned with the hammer head") # move the hammer up to hit the nail
# If the hammer is in position, repeat steps 6 and 7 until the nail is fully
# inserted.
if check("the hammer is in position and hitting the nail and the nail is not fully inserted"):
    robot.move_gripper("near the nail") # move the hammer down towards the nail again
elif check("the nail is fully inserted"):
    robot.move_gripper("vertically aligned with the hammer handle") # move the hammer away from the nail and release the nail and hammer.
{'hammer': [("the robot's gripper is not vertically aligned with the hammer handle", "the robot's gripper is vertically aligned with the hammer handle"), ("the robot's gripper is above the hammer handle and the gripper is open", "the robot's gripper is around the hammer handle"), ('the hammer handle is held by the gripper', "the robot's gripper is vertically aligned with the nail"), ("the robot's gripper is above the nail and the gripper is open", "the robot's gripper is around the nail"), ('the hammer handle is held by the gripper and the nail is held by the gripper', "the robot's gripper is vertically aligned with the nail"), ("the robot's gripper is vertically aligned with the nail and the robot's gripper is above the nail", "the robot's gripper is near the nail"), ("the robot's gripper is above the nail and the nail is held by the gripper", "the robot's gripper is almost vertically aligned with the hammer head"), ('the hammer is in position and hitting the nail and the nail is not fully inserted', "the robot's gripper is near the nail"), ('the nail is fully inserted', "the robot's gripper is vertically aligned with the hammer handle")]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not vertically aligned with the hammer", 'push the gripper into the puck'), ("the robot's gripper is above the hammer and the robot's gripper is open", 'drop gripper around puck'), ("the hammer is below the robot's gripper", 'push the gripper into the puck'), ("the robot's gripper is above the hammer and the robot's gripper is open", 'drop gripper around puck'), ("the hammer is below the robot's gripper and the hammer is below the robot's gripper", 'push the gripper into the puck'), ("the robot's gripper is vertically aligned with the hammer and the robot's gripper is above the hammer", 'push the gripper into the puck'), ("the robot's gripper is above the hammer and the hammer is below the robot's gripper", 'put the gripper above the puck'), ("hammer is not touching the table and the robot's gripper is closed", 'push the gripper into the puck'), ("the robot's gripper is closed", 'push the gripper into the puck')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not vertically aligned with the hammer", 'push the gripper into the puck'), ("the robot's gripper is above the hammer and the robot's gripper is open", 'drop gripper around puck'), ("the hammer is below the robot's gripper", 'push the gripper into the puck'), ("the robot's gripper is above the hammer and the robot's gripper is open", 'drop gripper around puck'), ("the hammer is below the robot's gripper and the hammer is below the robot's gripper", 'push the gripper into the puck'), ("the robot's gripper is vertically aligned with the hammer and the robot's gripper is above the hammer", 'push the gripper into the puck'), ("the robot's gripper is above the hammer and the hammer is below the robot's gripper", 'put the gripper above the puck'), ("hammer is not touching the table and the robot's gripper is closed", 'push the gripper into the puck'), ("the robot's gripper is closed", 'push the gripper into the puck')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not vertically aligned with the hammer", 'push the gripper into the puck'), ("the robot's gripper is above the hammer and the robot's gripper is open", 'drop gripper around puck'), ("the hammer is below the robot's gripper", 'push the gripper into the puck'), ("the robot's gripper is above the hammer and the robot's gripper is open", 'drop gripper around puck'), ("the hammer is below the robot's gripper and the hammer is below the robot's gripper", 'push the gripper into the puck'), ("the robot's gripper is vertically aligned with the hammer and the robot's gripper is above the hammer", 'push the gripper into the puck'), ("the robot's gripper is above the hammer and the hammer is below the robot's gripper", 'put the gripper above the puck'), ("hammer is not touching the table and the robot's gripper is closed", 'push the gripper into the puck'), ("the robot's gripper is closed", 'push the gripper into the puck')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.9577663618256929
Success rates:
{
 "hammer": 0.0
}
