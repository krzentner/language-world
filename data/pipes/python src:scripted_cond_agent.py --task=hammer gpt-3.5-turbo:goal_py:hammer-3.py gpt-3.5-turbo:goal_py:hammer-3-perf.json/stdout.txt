['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py
# Steps:
    #  1. Put gripper above hammer handle
    #  2. Drop gripper around hammer handle
    #  3. Lift hammer and move it above nail
    #  4. Swing hammer down onto nail
    # First, put the gripper above the hammer handle.
    if check("the robot's gripper is not above the hammer handle"):
        robot.move_gripper("above the hammer handle")
    # If the gripper isn't around the hammer handle, put it around the handle.
    if check("the robot's gripper is not around the hammer handle and the robot's gripper is open"):
        robot.move_gripper("near the hammer handle", close_gripper=True)
    # Once the gripper is around the handle, we can pick up the hammer.
    if check("the robot's gripper is around the hammer handle"):
        robot.move_gripper("above the nail")
    # Once the gripper is above the nail, we can swing the hammer down.
    if check("the robot's gripper is above the nail"):
        robot.move_gripper("above the hammer handle")  # lift the hammer back up
        robot.move_gripper("away from the nail")  # release the nail
{'hammer': [("the robot's gripper is not above the hammer handle", "the robot's gripper is above the hammer handle"), ("the robot's gripper is not around the hammer handle and the robot's gripper is open", "the robot's gripper is near the hammer handle and the robot's gripper is closed"), ("the robot's gripper is around the hammer handle", "the robot's gripper is above the nail"), ("the robot's gripper is above the nail", "the robot's gripper is above the hammer handle")]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the hammer", 'put the gripper above the puck'), ("the robot's gripper is not around the hammer and the robot's gripper is open", 'push the gripper into the puck'), ("the robot's gripper is around the hammer", 'put the gripper above the puck'), ("the robot's gripper is above the hammer", 'put the gripper above the puck')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the hammer", 'put the gripper above the puck'), ("the robot's gripper is not around the hammer and the robot's gripper is open", 'push the gripper into the puck'), ("the robot's gripper is around the hammer", 'put the gripper above the puck'), ("the robot's gripper is above the hammer", 'put the gripper above the puck')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the hammer", 'put the gripper above the puck'), ("the robot's gripper is not around the hammer and the robot's gripper is open", 'push the gripper into the puck'), ("the robot's gripper is around the hammer", 'put the gripper above the puck'), ("the robot's gripper is above the hammer", 'put the gripper above the puck')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.9545386065604805
Success rates:
{
 "hammer": 0.0
}
