['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py.md
# door-lock: turn the dial on the door
# def door_lock(robot):
    # Steps:
    #  1. Put gripper around the dial
    #  2. Turn the dial clockwise until it stops
    #  3. Turn the dial counterclockwise to the combination
    #  4. Turn the dial clockwise until it stops again to lock the door
    # First, put the gripper around the dial to begin turning it.
    if check("the robot's gripper is not around the dial and the robot's gripper is open"):
        robot.drop("gripper around the dial")
    # Turn the dial clockwise until it stops.
    # We know the direction to turn it because we need to turn it to the right to
    # unlock the door.
    if check("the robot's gripper is around the dial"):
        robot.turn("dial clockwise until it stops")
    # Turn the dial counterclockwise to the combination.
    # The amount to turn counterclockwise needs to be found experimentally, so
    # the robot needs to know the combination beforehand.
    if check("the robot's gripper is around the dial"):
        robot.turn("dial counterclockwise to combination")
    # Turn the dial clockwise until it stops to lock the door.
    if check("the robot's gripper is around the dial"):
        robot.turn("dial clockwise until it stops to lock door")
{'door-lock': [("the robot's gripper is not around the dial and the robot's gripper is open", 'drop gripper around the dial'), ("the robot's gripper is around the dial", 'turn dial clockwise until it stops'), ("the robot's gripper is around the dial", 'turn dial counterclockwise to combination'), ("the robot's gripper is around the dial", 'turn dial clockwise until it stops to lock door')]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not around the door's lock and the robot's gripper is open", 'drop gripper around puck'), ("the robot's gripper is around the door's lock", 'insert peg into hole'), ("the robot's gripper is around the door's lock", 'align peg to hole'), ("the robot's gripper is around the door's lock", 'insert peg into hole')], env_name='door-lock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not around the door's lock and the robot's gripper is open", 'drop gripper around puck'), ("the robot's gripper is around the door's lock", 'insert peg into hole'), ("the robot's gripper is around the door's lock", 'align peg to hole'), ("the robot's gripper is around the door's lock", 'insert peg into hole')], env_name='door-lock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.09
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not around the door's lock and the robot's gripper is open", 'drop gripper around puck'), ("the robot's gripper is around the door's lock", 'insert peg into hole'), ("the robot's gripper is around the door's lock", 'align peg to hole'), ("the robot's gripper is around the door's lock", 'insert peg into hole')], env_name='door-lock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 4.895379265905717
Success rates:
{
 "door-lock": 0.09
}
