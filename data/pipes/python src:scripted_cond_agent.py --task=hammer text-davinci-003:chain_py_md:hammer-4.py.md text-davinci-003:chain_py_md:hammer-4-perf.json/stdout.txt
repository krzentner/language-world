['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py.md


The program should look like this:

``` 
# hammer: hit the nail with the hammer
# def hammer(robot):
    # Steps:
    #  1. Put the gripper above the hammer handle
    #  2. Drop the gripper around the hammer handle
    #  3. Move the robot's arm down towards the nail
    #  4. Hit the nail with the hammer
    # First, put the gripper above the hammer handle so that the robot can grab
    # it and move the arm down.
    if check("the robot's gripper is not above the hammer handle"):
        robot.put("gripper above hammer handle")
    # Now, the gripper is above the hammer handle, so move it around the handle
    # to grab it.
    if check("the robot's gripper is not around the hammer handle"):
        robot.drop("gripper around hammer handle")
    # Once the gripper is around the hammer handle, start to lower the arm
    # towards the nail.
    if check("the robot's gripper is around the hammer handle and the robot's arm is not close to the nail"):
        robot.move("arm down towards nail")
    # When the arm is close to the nail, start to hit the nail with the hammer.
    if check("the robot's arm is close to the nail"):
        robot.hit("nail with hammer")
```
{'hammer': [("the robot's gripper is not above the hammer handle", 'put gripper above hammer handle'), ("the robot's gripper is not around the hammer handle", 'drop gripper around hammer handle'), ("the robot's gripper is around the hammer handle and the robot's arm is not close to the nail", 'move arm down towards nail'), ("the robot's arm is close to the nail", 'hit nail with hammer')]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the hammer", 'put gripper above button'), ("the robot's gripper is not around the hammer", 'drop gripper around puck'), ("the robot's gripper is around the hammer and the robot's gripper is not left of the hammer", 'push down on button'), ("the robot's gripper is left of the hammer", 'grab peg')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the hammer", 'put gripper above button'), ("the robot's gripper is not around the hammer", 'drop gripper around puck'), ("the robot's gripper is around the hammer and the robot's gripper is not left of the hammer", 'push down on button'), ("the robot's gripper is left of the hammer", 'grab peg')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the hammer", 'put gripper above button'), ("the robot's gripper is not around the hammer", 'drop gripper around puck'), ("the robot's gripper is around the hammer and the robot's gripper is not left of the hammer", 'push down on button'), ("the robot's gripper is left of the hammer", 'grab peg')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.9594489324725363
Success rates:
{
 "hammer": 0.0
}
