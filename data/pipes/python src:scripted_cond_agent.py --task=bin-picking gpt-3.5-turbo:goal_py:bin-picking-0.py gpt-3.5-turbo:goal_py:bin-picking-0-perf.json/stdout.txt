['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py
# Steps:
    #  1. Scan the area and locate the cube and target bin
    #  2. Calculate the path to the cube, avoiding any obstacles
    #  3. Move the gripper to the cube
    #  4. Close the gripper around the cube
    #  5. Calculate the path to the target bin, avoiding any obstacles
    #  6. Move the gripper to the target bin
    #  7. Release the cube into the bin
    # First, scan the area and locate the cube and target bin.
    cube_location = scan_for_object("cube")
    bin_location = scan_for_object("bin")
    # Next, calculate a path to the cube, avoiding any obstacles.
    path_to_cube = calculate_path(robot.current_location, cube_location)
    # Follow the path to the cube.
    follow_path(robot, path_to_cube)
    # Once we've reached the cube, move the gripper around it and close it.
    if check("the robot's gripper is not around the cube"):
        robot.move_gripper("around the cube", close_gripper=True)
    # Next, calculate a path to the target bin, avoiding any obstacles.
    path_to_bin = calculate_path(robot.current_location, bin_location)
    # Follow the path to the bin.
    follow_path(robot, path_to_bin)
    # Once we've reached the target bin, release the cube into the bin.
    if check("the robot's gripper is not above the bin"):
        robot.move_gripper("above the bin")
    if check("the robot's gripper is above the bin and the gripper is closed"):
        robot.move_gripper("open", close_gripper=False)
{'bin-picking': [("the robot's gripper is not around the cube", "the robot's gripper is around the cube and the robot's gripper is closed"), ("the robot's gripper is not above the bin", "the robot's gripper is above the bin")]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not around the cube", 'put the gripper in front of the drawer'), ("the robot's gripper is not above the cube", 'put the gripper above the puck')], env_name='bin-picking', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not around the cube", 'put the gripper in front of the drawer'), ("the robot's gripper is not above the cube", 'put the gripper above the puck')], env_name='bin-picking', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not around the cube", 'put the gripper in front of the drawer'), ("the robot's gripper is not above the cube", 'put the gripper above the puck')], env_name='bin-picking', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.015547031200262596
Success rates:
{
 "bin-picking": 0.0
}
