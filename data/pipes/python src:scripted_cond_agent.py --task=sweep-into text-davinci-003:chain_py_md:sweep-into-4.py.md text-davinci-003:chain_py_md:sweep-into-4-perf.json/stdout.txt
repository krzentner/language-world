['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py.md


Steps:
1. Move the robot's gripper to be behind the cube.
2. Grab the cube from the back side with the gripper.
3. Move the cube to the target location. 

```
# sweep-into: grab the cube and move it to the target location
# def sweep_into(robot):
    # Steps:
    #  1. Move the robot's gripper to be behind the cube.
    #  2. Grab the cube from the back side with the gripper.
    #  3. Move the cube to the target location.
    if check("the robot's gripper is not behind the cube"):
        robot.move("gripper behind cube")

    if check("the robot's gripper is behind the cube and the robot's gripper is not around the cube"):
        robot.grab("cube from back")
    
    if check("the robot's gripper is above the cube and the robot's gripper is closed"):
        robot.slide("cube to goal")

```
{'sweep-into': [("the robot's gripper is not behind the cube", 'move gripper behind cube'), ("the robot's gripper is behind the cube and the robot's gripper is not around the cube", 'grab cube from back'), ("the robot's gripper is above the cube and the robot's gripper is closed", 'slide cube to goal')]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not behind the cube", 'close gripper around puck'), ("the robot's gripper is behind the cube and the robot's gripper is not around the cube", 'grab peg'), ("the robot's gripper is above the cube and the robot's gripper is closed", 'slide the puck to the goal')], env_name='sweep-into', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not behind the cube", 'close gripper around puck'), ("the robot's gripper is behind the cube and the robot's gripper is not around the cube", 'grab peg'), ("the robot's gripper is above the cube and the robot's gripper is closed", 'slide the puck to the goal')], env_name='sweep-into', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not behind the cube", 'close gripper around puck'), ("the robot's gripper is behind the cube and the robot's gripper is not around the cube", 'grab peg'), ("the robot's gripper is above the cube and the robot's gripper is closed", 'slide the puck to the goal')], env_name='sweep-into', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.026624791474986226
Success rates:
{
 "sweep-into": 0.0
}
