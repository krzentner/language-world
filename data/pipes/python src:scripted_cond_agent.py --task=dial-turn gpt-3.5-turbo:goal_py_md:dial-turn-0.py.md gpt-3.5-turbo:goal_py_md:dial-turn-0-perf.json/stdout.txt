['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py.md
# dial-turn: turn the dial
# def dial_turn(robot):
    # Steps:
    # 1. Put gripper above the dial
    # 2. Drop gripper around dial
    # 3. Turn dial to target position
    # First, put the gripper roughly above the dial so that we don't bump it while
    # trying to grab it.
    if check("the robot's gripper is not above the dial"):
        robot.move_gripper("above the dial")
    # If the gripper isn't around the dial, put it around the dial.
    if check("the robot's gripper is not around dial and the robot's gripper is open"):
        robot.move_gripper("near the dial", close_gripper=True)
    # If the gripper is around the dial and the dial's position is not aligned
    # with the target, turn the dial to the target position
    if check("the robot's gripper is around dial and the dial's position is not aligned with the target"):
        robot.move_gripper("aligned with the target position")
{'dial-turn': [("the robot's gripper is not above the dial", "the robot's gripper is above the dial"), ("the robot's gripper is not around dial and the robot's gripper is open", "the robot's gripper is near the dial and the robot's gripper is closed"), ("the robot's gripper is around dial and the dial's position is not aligned with the target", "the robot's gripper is near aligned with the target position")]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the dial", 'put the gripper above the puck'), ("the robot's gripper is not around the dial and the robot's gripper is open", 'push the gripper into the puck'), ("the robot's gripper is around the dial and the dial is not forward aligned with the robot's gripper", 'put the gripper in front of the drawer')], env_name='dial-turn', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the dial", 'put the gripper above the puck'), ("the robot's gripper is not around the dial and the robot's gripper is open", 'push the gripper into the puck'), ("the robot's gripper is around the dial and the dial is not forward aligned with the robot's gripper", 'put the gripper in front of the drawer')], env_name='dial-turn', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the dial", 'put the gripper above the puck'), ("the robot's gripper is not around the dial and the robot's gripper is open", 'push the gripper into the puck'), ("the robot's gripper is around the dial and the dial is not forward aligned with the robot's gripper", 'put the gripper in front of the drawer')], env_name='dial-turn', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.040729258560036036
Success rates:
{
 "dial-turn": 0.0
}
