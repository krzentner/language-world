['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py.md


Here is the program to perform the task `door-lock`:

```
# door-lock: turn the dial on the door
# def door_lock(robot):
    # Steps:
    #  1. Put gripper near the lock's dial
    #  2. Turn the dial to the left
    #  3. Turn the dial to the right
    # We need to put the gripper near the lock's dial before we can turn it.
    if check("the robot's gripper is not near the dial"):
        robot.move_gripper("near the dial")
    # If the gripper is near the dial and orientated properly, turn the dial
    # to the left.
    if check("the robot's gripper is near the dial and it is in the correct orientation"):
        robot.move_gripper("left of the dial")
    # We don't know how far the dial needs to be turned, so turn it to the right
    # until the door unlocks.
    if check("the robot's gripper is right of the dial"):
        robot.move_gripper("right of the dial")

```
{'door-lock': [("the robot's gripper is not near the dial", "the robot's gripper is near the dial"), ("the robot's gripper is near the dial and it is in the correct orientation", "the robot's gripper is left of the dial"), ("the robot's gripper is right of the dial", "the robot's gripper is right of the dial")]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not near the door's lock", 'put the gripper in front of the drawer'), ("the robot's gripper is near the door's lock and door's lock is touching the table", 'put the gripper in front of the drawer'), ("the robot's gripper is right of the door's lock", 'put the gripper in front of the drawer')], env_name='door-lock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not near the door's lock", 'put the gripper in front of the drawer'), ("the robot's gripper is near the door's lock and door's lock is touching the table", 'put the gripper in front of the drawer'), ("the robot's gripper is right of the door's lock", 'put the gripper in front of the drawer')], env_name='door-lock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not near the door's lock", 'put the gripper in front of the drawer'), ("the robot's gripper is near the door's lock and door's lock is touching the table", 'put the gripper in front of the drawer'), ("the robot's gripper is right of the door's lock", 'put the gripper in front of the drawer')], env_name='door-lock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.913860005454206
Success rates:
{
 "door-lock": 0.0
}
