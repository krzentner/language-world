['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py
Oops, it seems like the function for window-open was already defined. Here are the correct functions for each action:

# reach: reach to the target location
def reach(robot):
    if check("the robot's gripper is not near reach target"):
        robot.reach("to goal")

# push: slide the puck to the target location
def push(robot):
    if check("the robot's gripper is not above puck and the robot's gripper is not vertically aligned with the puck"):
        robot.put("the gripper above the puck")
    if check("the robot's gripper is vertically aligned with the puck and the robot's gripper is not near puck"):
        robot.push("the gripper into the puck")
    if check("the robot's gripper is near the puck and the puck is below the robot's gripper"):
        robot.slide("the puck to the goal")

# pick-place: pick up the puck and hold it at the target location
def pick_place(robot):
    if check("the robot's gripper is not above the puck"):
        robot.place("gripper above puck")
    if check("the robot's gripper is not around puck and the robot's gripper is open"):
        robot.drop("gripper around puck")
    if check("the robot's gripper is near puck and the robot's gripper is open"):
        robot.close("gripper around puck")
    if check("the robot's gripper is above puck and the robot's gripper is closed"):
        robot.place("puck at goal")

# door-open: pull the door open
def door_open(robot):
    if check("the robot's gripper is not almost vertically aligned with door handle"):
        robot.put("gripper above door handle")
    if check("the robot's gripper is almost vertically aligned with the door handle and the robot's gripper is open"):
        robot.put("gripper around door handle")
    if check("the robot's gripper is vertically aligned with the door handle"):
        robot.pull("door open")

# drawer-open: pull the drawer open
def drawer_open(robot):
    if check("the robot's gripper is not vertically aligned with drawer handle"):
        robot.put("gripper above drawer handle")
    if check("the robot's gripper is vertically aligned with drawer handle and the robot's gripper is not around drawer handle"):
        robot.put("gripper around drawer handle")
    if check("the robot's gripper is around drawer handle"):
        robot.pull("away from drawer")

# drawer-close: push the drawer close
def drawer_close(robot):
    if check("the robot's gripper is not near the drawer handle"):
        robot.grab("drawer handle")
    if check("the robot's gripper is forward aligned with drawer handle"):
        robot.push("drawer closed")

# button-press-topdown: push the button down from above
def button_press_topdown(robot):
    if check("the robot's gripper is not vertically aligned with button"):
        robot.put("gripper above button")
    if check("the robot's gripper is vertically aligned with button"):
        robot.push("down on button")

# peg-insert-side: insert the peg into the hole from the side
def peg_insert_side(robot):
    if check("the robot's gripper is not vertically aligned with the peg"):
        robot.put("gripper above peg")
    if check("peg is not left of the robot's gripper and peg is not forward aligned with the robot's gripper"):
        robot.grab("peg")
    if check("the robot's gripper is forward aligned with the peg and the peg is not horizontally aligned with hole"):
        robot.align("peg to hole")
    if check("peg is horizontally aligned with hole"):
        robot.insert("peg into hole")

# window-open: slide the window open to the left
def window_open(robot):
    if check("the robot's gripper is not vertically aligned with the window handle and the robot's gripper is below the window handle"):
        robot.move("gripper to right of window handle")
    if check("the robot's gripper is near the window handle"):
        robot.slide("window left")
    if check("the robot's gripper is in front of the window handle"):
        robot.push("window left harder")

# window-close: slide the window closed to the right
def window_close(robot):
    if check("the window handle is right of the robot's gripper and the robot's gripper is not near the window handle"):
        robot.move("gripper to left of window handle")
    if check("the robot's gripper is near the window handle"):
        robot.slide("window right")
    if check("the robot's gripper is in front of the window handle"):
        robot.push("window right harder")
{'reach': [("the robot's gripper is not near reach target", 'reach to goal')], 'push': [("the robot's gripper is not above puck and the robot's gripper is not vertically aligned with the puck", 'put the gripper above the puck'), ("the robot's gripper is vertically aligned with the puck and the robot's gripper is not near puck", 'push the gripper into the puck'), ("the robot's gripper is near the puck and the puck is below the robot's gripper", 'slide the puck to the goal')], 'pick-place': [("the robot's gripper is not above the puck", 'place gripper above puck'), ("the robot's gripper is not around puck and the robot's gripper is open", 'drop gripper around puck'), ("the robot's gripper is near puck and the robot's gripper is open", 'close gripper around puck'), ("the robot's gripper is above puck and the robot's gripper is closed", 'place puck at goal')], 'door-open': [("the robot's gripper is not almost vertically aligned with door handle", 'put gripper above door handle'), ("the robot's gripper is almost vertically aligned with the door handle and the robot's gripper is open", 'put gripper around door handle'), ("the robot's gripper is vertically aligned with the door handle", 'pull door open')], 'drawer-open': [("the robot's gripper is not vertically aligned with drawer handle", 'put gripper above drawer handle'), ("the robot's gripper is vertically aligned with drawer handle and the robot's gripper is not around drawer handle", 'put gripper around drawer handle'), ("the robot's gripper is around drawer handle", 'pull away from drawer')], 'drawer-close': [("the robot's gripper is not near the drawer handle", 'grab drawer handle'), ("the robot's gripper is forward aligned with drawer handle", 'push drawer closed')], 'button-press-topdown': [("the robot's gripper is not vertically aligned with button", 'put gripper above button'), ("the robot's gripper is vertically aligned with button", 'push down on button')], 'peg-insert-side': [("the robot's gripper is not vertically aligned with the peg", 'put gripper above peg'), ("peg is not left of the robot's gripper and peg is not forward aligned with the robot's gripper", 'grab peg'), ("the robot's gripper is forward aligned with the peg and the peg is not horizontally aligned with hole", 'align peg to hole'), ('peg is horizontally aligned with hole', 'insert peg into hole')], 'window-open': [("the robot's gripper is not vertically aligned with the window handle and the robot's gripper is below the window handle", 'move gripper to right of window handle'), ("the robot's gripper is near the window handle", 'slide window left'), ("the robot's gripper is in front of the window handle", 'push window left harder')], 'window-close': [("the window handle is right of the robot's gripper and the robot's gripper is not near the window handle", 'move gripper to left of window handle'), ("the robot's gripper is near the window handle", 'slide window right'), ("the robot's gripper is in front of the window handle", 'push window right harder')]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not vertically aligned with the window handle and the robot's gripper is below the window handle", 'move gripper to right of window handle'), ("the robot's gripper is near the window handle", 'slide window left'), ("the robot's gripper is in front of the window handle", 'push window left harder')], env_name='window-open', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not vertically aligned with the window handle and the robot's gripper is below the window handle", 'move gripper to right of window handle'), ("the robot's gripper is near the window handle", 'slide window left'), ("the robot's gripper is in front of the window handle", 'push window left harder')], env_name='window-open', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 1.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not vertically aligned with the window handle and the robot's gripper is below the window handle", 'move gripper to right of window handle'), ("the robot's gripper is near the window handle", 'slide window left'), ("the robot's gripper is in front of the window handle", 'push window left harder')], env_name='window-open', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 5.616330974789306
Success rates:
{
 "window-open": 1.0
}
