['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py
# Steps:
    # 1. Put gripper above the dial
    # 2. Grab the dial with the gripper
    # 3. Turn the dial to the correct combination
    # 4. Unlock the door
    # First, move the gripper above the dial.
    if check("the robot's gripper is not above the dial"):
        robot.move("gripper above the dial")
    # Next, grab the dial with the gripper.
    if check("the robot's gripper is above the dial and the gripper is not grabbing the dial"):
        robot.grab("dial")
    # Turn the dial to the correct combination.
    if check("the gripper is grabbing the dial but it is not in the correct combination"):
        robot.turn("the dial to the correct combination")
    # Finally, unlock the door.
    if check("the dial is in the correct combination"):
        robot.unlock("the door")
{'door-lock': [("the robot's gripper is not above the dial", 'move gripper above the dial'), ("the robot's gripper is above the dial and the gripper is not grabbing the dial", 'grab dial'), ('the gripper is grabbing the dial but it is not in the correct combination', 'turn the dial to the correct combination'), ('the dial is in the correct combination', 'unlock the door')]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the door's lock", 'put the gripper above the puck'), ("the robot's gripper is above the door's lock and the robot's gripper is not behind the door's lock", 'grab peg'), ("the robot's gripper is closed and the robot's gripper is not behind the door's lock", 'push the gripper into the puck'), ("the door's lock is behind the robot's gripper", 'pull door open')], env_name='door-lock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the door's lock", 'put the gripper above the puck'), ("the robot's gripper is above the door's lock and the robot's gripper is not behind the door's lock", 'grab peg'), ("the robot's gripper is closed and the robot's gripper is not behind the door's lock", 'push the gripper into the puck'), ("the door's lock is behind the robot's gripper", 'pull door open')], env_name='door-lock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 1.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the door's lock", 'put the gripper above the puck'), ("the robot's gripper is above the door's lock and the robot's gripper is not behind the door's lock", 'grab peg'), ("the robot's gripper is closed and the robot's gripper is not behind the door's lock", 'push the gripper into the puck'), ("the door's lock is behind the robot's gripper", 'pull door open')], env_name='door-lock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 6.685850252112811
Success rates:
{
 "door-lock": 1.0
}
