['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py

    # Steps:
    #  1. Put gripper near a hammer
    #  2. Grab the hammer with the gripper
    #  3. Put the gripper near the nail
    #  4. Swing the hammer down to drive the nail
    # First, put the gripper near the hammer.
    if check("the robot's gripper is not near hammer"):
        robot.move_gripper("near the hammer")
    # Once the gripper is near the hammer, grab it.
    if check("the robot's gripper is near hammer and the gripper is not closed"):
        robot.move_gripper("near the hammer", close_gripper=True)
    # Now that the hammer is in the robot's gripper, move the gripper
    # towards the nail.
    if check("the robot's gripper is not near the nail"):
        robot.move_gripper("near the nail")
    # Once the gripper is close to the nail, swing the hammer down to drive it.
    if check("the robot's gripper is near the nail"):
        robot.move_gripper("below the nail")
{'hammer': [("the robot's gripper is not near hammer", "the robot's gripper is near the hammer"), ("the robot's gripper is near hammer and the gripper is not closed", "the robot's gripper is near the hammer and the robot's gripper is closed"), ("the robot's gripper is not near the nail", "the robot's gripper is near the nail"), ("the robot's gripper is near the nail", "the robot's gripper is below the nail")]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not near the hammer", 'push the gripper into the puck'), ("the robot's gripper is near the hammer and the robot's gripper is closed", 'push the gripper into the puck'), ("the robot's gripper is not near the hammer", 'push the gripper into the puck'), ("the robot's gripper is near the hammer", 'put the gripper above the puck')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not near the hammer", 'push the gripper into the puck'), ("the robot's gripper is near the hammer and the robot's gripper is closed", 'push the gripper into the puck'), ("the robot's gripper is not near the hammer", 'push the gripper into the puck'), ("the robot's gripper is near the hammer", 'put the gripper above the puck')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not near the hammer", 'push the gripper into the puck'), ("the robot's gripper is near the hammer and the robot's gripper is closed", 'push the gripper into the puck'), ("the robot's gripper is not near the hammer", 'push the gripper into the puck'), ("the robot's gripper is near the hammer", 'put the gripper above the puck')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.9578011868985591
Success rates:
{
 "hammer": 0.0
}
