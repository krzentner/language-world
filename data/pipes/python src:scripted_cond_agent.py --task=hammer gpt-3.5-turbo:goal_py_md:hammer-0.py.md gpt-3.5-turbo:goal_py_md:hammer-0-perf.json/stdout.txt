['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py.md
# hammer: hit the nail with the hammer
# def hammer(robot):
    # Steps:
    #  1. Put gripper above the hammer
    #  2. Grab the hammer with the gripper
    #  3. Line up hammer with nail
    #  4. Use hammer to hit nail
    # First, put the gripper above the hammer.
    if check("the robot's gripper is not vertically aligned with the hammer"):
        robot.move_gripper("vertically aligned with the hammer")
    # If the hammer isn't grasped by the gripper, put the gripper around it and grab it.
    if check("the robot's gripper is not around the hammer and the robot's gripper is open"):
        robot.move_gripper("near the hammer", close_gripper=True)
    # Once the gripper has the hammer, line it up with the nail.
    if check("the hammer is not near the nail"):
        robot.move_gripper("above the nail")
    # Finally, use the hammer to hit the nail.
    if check("the hammer is near the nail"):
        robot.hit_with_hammer()
{'hammer': [("the robot's gripper is not vertically aligned with the hammer", "the robot's gripper is vertically aligned with the hammer"), ("the robot's gripper is not around the hammer and the robot's gripper is open", "the robot's gripper is near the hammer and the robot's gripper is closed"), ('the hammer is not near the nail', "the robot's gripper is above the nail")]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not vertically aligned with the hammer", 'push the gripper into the puck'), ("the robot's gripper is not around the hammer and the robot's gripper is open", 'push the gripper into the puck'), ("the hammer is not near the robot's gripper", 'put the gripper above the puck')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not vertically aligned with the hammer", 'push the gripper into the puck'), ("the robot's gripper is not around the hammer and the robot's gripper is open", 'push the gripper into the puck'), ("the hammer is not near the robot's gripper", 'put the gripper above the puck')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not vertically aligned with the hammer", 'push the gripper into the puck'), ("the robot's gripper is not around the hammer and the robot's gripper is open", 'push the gripper into the puck'), ("the hammer is not near the robot's gripper", 'put the gripper above the puck')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.9546593396625603
Success rates:
{
 "hammer": 0.0
}
