['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py.md


The robot can assemble objects by simply grasping one with the gripper and then rotating it around the other. The code would look like this:

```
# assembly: put the wrench around the peg
# def assembly(robot):
    # Steps:
    #  1. Reach for the wrench
    #  2. Move the wrench above the peg
    #  3. Grab the wrench with the gripper
    #  4. Rotate the wrench around the peg
    # First, reach for the wrench.
    if check("the robot's gripper is not near the wrench"):
        robot.move_gripper("near the wrench")
    # Once the gripper is near the wrench, move it above the peg.
    if check("the robot's gripper is near the wrench"):
        robot.move_gripper("above the peg")
    # If the gripper isn't close to the wrench, use the gripper to grab it.
    if check("the robot's gripper is not near the wrench and the gripper is open"):
        robot.move_gripper("near the wrench", close_gripper=True)
    # If the gripper is close to the wrench and the gripper is closed, we can
    # rotate the wrench around the peg.
    if check("the robot's gripper is near the wrench and the gripper is closed"):
        robot.move_gripper("around the peg")
{'assembly': [("the robot's gripper is not near the wrench", "the robot's gripper is near the wrench"), ("the robot's gripper is near the wrench", "the robot's gripper is above the peg"), ("the robot's gripper is not near the wrench and the gripper is open", "the robot's gripper is near the wrench and the robot's gripper is closed"), ("the robot's gripper is near the wrench and the gripper is closed", "the robot's gripper is around the peg")]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not near the wrench", 'push the gripper into the puck'), ("the robot's gripper is near the wrench", 'put the gripper above the puck'), ("the robot's gripper is not near the wrench and the robot's gripper is open", 'push the gripper into the puck'), ("the robot's gripper is near the wrench and the robot's gripper is closed", 'put the gripper in front of the drawer')], env_name='assembly', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not near the wrench", 'push the gripper into the puck'), ("the robot's gripper is near the wrench", 'put the gripper above the puck'), ("the robot's gripper is not near the wrench and the robot's gripper is open", 'push the gripper into the puck'), ("the robot's gripper is near the wrench and the robot's gripper is closed", 'put the gripper in front of the drawer')], env_name='assembly', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not near the wrench", 'push the gripper into the puck'), ("the robot's gripper is near the wrench", 'put the gripper above the puck'), ("the robot's gripper is not near the wrench and the robot's gripper is open", 'push the gripper into the puck'), ("the robot's gripper is near the wrench and the robot's gripper is closed", 'put the gripper in front of the drawer')], env_name='assembly', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 1.438545238104168
Success rates:
{
 "assembly": 0.0
}
