['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py.md


Next, the steps: 

1. Put the gripper above the dial
2. Drop the gripper around the dial
3. Turn the dial clockwise to lock the door

Assuming the correct code is written for the `check()` function: 

```
# door-lock: turn the dial on the door
# def door_lock(robot):
    # Steps:
    #  1. Put gripper above the dial
    #  2. Drop gripper around the dial
    #  3. Turn the dial clockwise to lock the door
    # Put the gripper near the dial 
    if check("the robot's gripper is not above the dial"):
        robot.put("gripper above the dial")
    # If the gripper is lined up above the dial, we can grab the dial by moving
    # the gripper down around it.
    if check("the robot's gripper is above the dial and the robot's gripper is not around the dial"):
        robot.drop("gripper around the dial")
    # Once the gripper is around the dial, turn it clockwise to lock the door.
    if check("the robot's gripper is around the dial"):
        robot.turn("clockwise")
```
{'door-lock': [("the robot's gripper is not above the dial", 'put gripper above the dial'), ("the robot's gripper is above the dial and the robot's gripper is not around the dial", 'drop gripper around the dial'), ("the robot's gripper is around the dial", 'turn clockwise')]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the door's lock", 'put the gripper above the puck'), ("the robot's gripper is above the door's lock and the robot's gripper is not around the door's lock", 'drop gripper around puck'), ("the robot's gripper is around the door's lock", 'push drawer closed')], env_name='door-lock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the door's lock", 'put the gripper above the puck'), ("the robot's gripper is above the door's lock and the robot's gripper is not around the door's lock", 'drop gripper around puck'), ("the robot's gripper is around the door's lock", 'push drawer closed')], env_name='door-lock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 1.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the door's lock", 'put the gripper above the puck'), ("the robot's gripper is above the door's lock and the robot's gripper is not around the door's lock", 'drop gripper around puck'), ("the robot's gripper is around the door's lock", 'push drawer closed')], env_name='door-lock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 6.481581542982923
Success rates:
{
 "door-lock": 1.0
}
