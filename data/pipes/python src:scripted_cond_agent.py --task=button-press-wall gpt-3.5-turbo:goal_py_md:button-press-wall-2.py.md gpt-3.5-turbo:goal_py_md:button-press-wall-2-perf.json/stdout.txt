['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py.md
# button-press-wall: push the button from the front with a short wall in the way
# def button_press_wall(robot):
    # Steps:
    #  1. Find a clear path to button
    #  2. Move the robot to the side of the wall
    #  3. Move the robot towards the button until robot is closer to it than the wall
    #  4. Line up the gripper with the button
    #  5. Push down on the button
    # First, use the robot's sensors to detect any obstacles blocking the path to
    # the button.
    if check("there is an obstacle in the way"):
        # If there is an obstacle, try to find a clear path to the button.
        if check("there is no clear path to the button"):
            # If there is no clear path to the button, move the robot around the
            # obstacle to find a clear path.
            robot.move_to("right of the obstacle")
            robot.move_to("in front of the obstacle")
            robot.move_to("left of the obstacle")
        else:
            # If there is a clear path to the button, move the robot towards the
            # button until it is closer to it than the obstacle.
            robot.move_to("in front of the button")
    # Once the robot is in front of the button and the gripper is above it,
    # push down on the button.
    if check("the robot's gripper is not vertically aligned with button"):
        robot.move_gripper("vertically aligned with the button", close_gripper=True)
    if check("the robot's gripper is vertically aligned with button"):
        robot.move_gripper("near the button")
{'button-press-wall': [("the robot's gripper is not vertically aligned with button", "the robot's gripper is vertically aligned with the button and the robot's gripper is closed"), ("the robot's gripper is vertically aligned with button", "the robot's gripper is near the button")]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not vertically aligned with the button", 'push the gripper into the puck'), ("the robot's gripper is vertically aligned with the button", 'push the gripper into the puck')], env_name='button-press-wall', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not vertically aligned with the button", 'push the gripper into the puck'), ("the robot's gripper is vertically aligned with the button", 'push the gripper into the puck')], env_name='button-press-wall', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 1.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not vertically aligned with the button", 'push the gripper into the puck'), ("the robot's gripper is vertically aligned with the button", 'push the gripper into the puck')], env_name='button-press-wall', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 8.769301004386595
Success rates:
{
 "button-press-wall": 1.0
}
