['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py.md
# door-unlock: turn the dial on the door
# def door_unlock(robot):
    if check("the robot's gripper is not above the dial"):
        robot.place("gripper above dial")
    if check("the robot's gripper is above the dial and the robot's gripper is not around the dial"):
        robot.drop("gripper around the dial")
    if check("the robot's gripper is around the dial and the robot's gripper is not gripping the dial tightly"):
        robot.close("gripper around the dial tightly")
    if check("the robot's gripper is gripping the dial tightly and the dial is not unlocked"):
        robot.rotate("dial to the correct combination")
        robot.open("door")
{'door-unlock': [("the robot's gripper is not above the dial", 'place gripper above dial'), ("the robot's gripper is above the dial and the robot's gripper is not around the dial", 'drop gripper around the dial'), ("the robot's gripper is around the dial and the robot's gripper is not gripping the dial tightly", 'close gripper around the dial tightly'), ("the robot's gripper is gripping the dial tightly and the dial is not unlocked", 'rotate dial to the correct combination')]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the door's lock", 'place gripper above puck'), ("the robot's gripper is above the door's lock and the robot's gripper is not around the door's lock", 'drop gripper around puck'), ("the robot's gripper is around the door's lock and the robot's gripper is not right of the door's lock", 'close gripper around puck'), ("the robot's gripper is right of the door's lock and the robot's gripper is closed", 'push the gripper into the puck')], env_name='door-unlock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the door's lock", 'place gripper above puck'), ("the robot's gripper is above the door's lock and the robot's gripper is not around the door's lock", 'drop gripper around puck'), ("the robot's gripper is around the door's lock and the robot's gripper is not right of the door's lock", 'close gripper around puck'), ("the robot's gripper is right of the door's lock and the robot's gripper is closed", 'push the gripper into the puck')], env_name='door-unlock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.91
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the door's lock", 'place gripper above puck'), ("the robot's gripper is above the door's lock and the robot's gripper is not around the door's lock", 'drop gripper around puck'), ("the robot's gripper is around the door's lock and the robot's gripper is not right of the door's lock", 'close gripper around puck'), ("the robot's gripper is right of the door's lock and the robot's gripper is closed", 'push the gripper into the puck')], env_name='door-unlock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 2.789965566532463
Success rates:
{
 "door-unlock": 0.91
}
