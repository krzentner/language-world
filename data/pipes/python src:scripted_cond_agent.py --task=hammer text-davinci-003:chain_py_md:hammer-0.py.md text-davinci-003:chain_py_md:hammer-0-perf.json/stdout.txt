['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py.md


Steps:
1. Put gripper above hammer
2. Align gripper with hammer and nail
3. Move gripper down to nail
4. Strike the nail with hammer

if check("the robot's gripper is not above hammer"):
    robot.put("gripper above hammer")
if check("the robot's gripper is not horizontally aligned with hammer and nail"):
    robot.align("gripper with hammer and nail")
if check("the robot's gripper is not near the nail and the robot's gripper is open"):
    robot.move("gripper down to nail")
if check("the robot's gripper is near the nail and the robot's gripper is closed"):
    robot.strike("nail with hammer")
{'hammer': [("the robot's gripper is not above hammer", 'put gripper above hammer'), ("the robot's gripper is not horizontally aligned with hammer and nail", 'align gripper with hammer and nail'), ("the robot's gripper is not near the nail and the robot's gripper is open", 'move gripper down to nail'), ("the robot's gripper is near the nail and the robot's gripper is closed", 'strike nail with hammer')]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the hammer", 'put gripper above button'), ("the robot's gripper is not horizontally aligned with the hammer", 'push the gripper into the puck'), ("the robot's gripper is not near the hammer and the robot's gripper is open", 'move gripper to left of window handle'), ("the robot's gripper is near the hammer and the robot's gripper is closed", 'put gripper above button')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the hammer", 'put gripper above button'), ("the robot's gripper is not horizontally aligned with the hammer", 'push the gripper into the puck'), ("the robot's gripper is not near the hammer and the robot's gripper is open", 'move gripper to left of window handle'), ("the robot's gripper is near the hammer and the robot's gripper is closed", 'put gripper above button')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the hammer", 'put gripper above button'), ("the robot's gripper is not horizontally aligned with the hammer", 'push the gripper into the puck'), ("the robot's gripper is not near the hammer and the robot's gripper is open", 'move gripper to left of window handle'), ("the robot's gripper is near the hammer and the robot's gripper is closed", 'put gripper above button')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 1.077781402584257
Success rates:
{
 "hammer": 0.0
}
