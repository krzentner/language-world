['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py
# Steps:
    #  1. Put gripper around dial
    #  2. Turn the dial in the correct direction
    # First, put the gripper around the dial.
    if check("the robot's gripper is not around the dial"):
        robot.move_gripper("around the dial")
    # Determine which direction to turn the dial.
    # Our strategy is to find the closest direction (left or right) to turn the dial.
    # If the correct direction is left, we want to turn the dial counter-clockwise.
    # If the correct direction is right, we want to turn the dial clockwise.
    dial_direction = determine_dial_direction()
    if dial_direction == "left":
        if check("the robot's gripper is not turned counter-clockwise"):
            robot.move_gripper("turned counter-clockwise")
    elif dial_direction == "right":
        if check("the robot's gripper is not turned clockwise"):
            robot.move_gripper("turned clockwise")
{'door-lock': [("the robot's gripper is not around the dial", "the robot's gripper is around the dial"), ("the robot's gripper is not turned counter-clockwise", "the robot's gripper is near turned counter-clockwise"), ("the robot's gripper is not turned clockwise", "the robot's gripper is near turned clockwise")]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not around the door's lock", 'put the gripper in front of the drawer'), ("the robot's gripper is not around the door's lock", 'put the gripper above the puck'), ("the robot's gripper is closed", 'drop gripper around puck')], env_name='door-lock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not around the door's lock", 'put the gripper in front of the drawer'), ("the robot's gripper is not around the door's lock", 'put the gripper above the puck'), ("the robot's gripper is closed", 'drop gripper around puck')], env_name='door-lock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not around the door's lock", 'put the gripper in front of the drawer'), ("the robot's gripper is not around the door's lock", 'put the gripper above the puck'), ("the robot's gripper is closed", 'drop gripper around puck')], env_name='door-lock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.9278759681900816
Success rates:
{
 "door-lock": 0.0
}
