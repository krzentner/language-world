['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py.md
# plate-slide-back-side: slide the plate back sideways into the target location
# def plate_slide_back_side(robot):
def plate_slide_back_side(robot):
    if check("the robot's gripper is not above or below the plate"):
        robot.lift("gripper above the plate")
    if check("the robot's gripper is not vertically aligned with the plate"):
        robot.move("gripper to the left or right side of the plate")
    if check("the plate is not between the robot's gripper and the target location"):
        robot.move("gripper towards the plate")
    if check("the plate is between the robot's gripper and the target location"):
        robot.slide("plate back into the target location sideways") 

# check function
def check(condition):
    if condition:
        return True
    else:
        return False

# example usage
plate_slide_back_side(robot)
{'plate-slide-back-side': [("the robot's gripper is not above or below the plate", 'lift gripper above the plate'), ("the robot's gripper is not vertically aligned with the plate", 'move gripper to the left or right side of the plate'), ("the plate is not between the robot's gripper and the target location", 'move gripper towards the plate'), ("the plate is between the robot's gripper and the target location", 'slide plate back into the target location sideways')], 'check': []}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the plate", 'put the gripper above the puck'), ("the robot's gripper is not vertically aligned with the plate", 'move gripper to right of window handle'), ("the plate is not below the robot's gripper and the robot's gripper is closed", 'move gripper to left of window handle'), ("the plate is below the robot's gripper and the robot's gripper is closed", 'slide the puck to the goal')], env_name='plate-slide-back-side', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the plate", 'put the gripper above the puck'), ("the robot's gripper is not vertically aligned with the plate", 'move gripper to right of window handle'), ("the plate is not below the robot's gripper and the robot's gripper is closed", 'move gripper to left of window handle'), ("the plate is below the robot's gripper and the robot's gripper is closed", 'slide the puck to the goal')], env_name='plate-slide-back-side', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the plate", 'put the gripper above the puck'), ("the robot's gripper is not vertically aligned with the plate", 'move gripper to right of window handle'), ("the plate is not below the robot's gripper and the robot's gripper is closed", 'move gripper to left of window handle'), ("the plate is below the robot's gripper and the robot's gripper is closed", 'slide the puck to the goal')], env_name='plate-slide-back-side', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.7117967454744257
Success rates:
{
 "plate-slide-back-side": 0.0
}
