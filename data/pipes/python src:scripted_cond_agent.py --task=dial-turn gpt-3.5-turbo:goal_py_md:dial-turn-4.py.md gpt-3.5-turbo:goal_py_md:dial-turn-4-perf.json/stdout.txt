['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py.md
# dial-turn: turn the dial
# def dial_turn(robot):
    # Steps:
    #  1. Put gripper above the dial
    #  2. Grab the dial with the gripper
    #  3. Turn the dial to the desired position
    # First, put the gripper above the dial.
    if check("the robot's gripper is not vertically aligned with the dial"):
        robot.move_gripper("vertically aligned with the dial")
    # If the gripper is not around the dial grab it.
    if check("the robot's gripper is not around the dial and the robot's gripper is open"):
        robot.move_gripper("near the dial", close_gripper=True)
    # If the gripper is near the dial, turn the dial to the desired position.
    if check("the robot's gripper is near dial and the gripper is closed"):
        robot.move_gripper("at the desired position relative to the current position")
{'dial-turn': [("the robot's gripper is not vertically aligned with the dial", "the robot's gripper is vertically aligned with the dial"), ("the robot's gripper is not around the dial and the robot's gripper is open", "the robot's gripper is near the dial and the robot's gripper is closed"), ("the robot's gripper is near dial and the gripper is closed", "the robot's gripper is near at the desired position relative to the current position")]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not vertically aligned with the dial", 'push the gripper into the puck'), ("the robot's gripper is not around the dial and the robot's gripper is open", 'push the gripper into the puck'), ("the robot's gripper is near the dial and the robot's gripper is closed", 'put the gripper in front of the drawer')], env_name='dial-turn', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not vertically aligned with the dial", 'push the gripper into the puck'), ("the robot's gripper is not around the dial and the robot's gripper is open", 'push the gripper into the puck'), ("the robot's gripper is near the dial and the robot's gripper is closed", 'put the gripper in front of the drawer')], env_name='dial-turn', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 1.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not vertically aligned with the dial", 'push the gripper into the puck'), ("the robot's gripper is not around the dial and the robot's gripper is open", 'push the gripper into the puck'), ("the robot's gripper is near the dial and the robot's gripper is closed", 'put the gripper in front of the drawer')], env_name='dial-turn', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 1.7808059522827748
Success rates:
{
 "dial-turn": 1.0
}
