['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py.md
# hammer: hit the nail with the hammer
# def hammer(robot):
    # Steps:
    #  1. Put the gripper above the hammer
    #  2. Close the gripper around the handle of the hammer
    #  3. Move the gripper above the nail
    #  4. Rotate the gripper to position the hammer a certain way
    #  5. Move the gripper downward to hit the nail
    #  6. Lift the gripper and release the hammer
    # First, put the gripper above the hammer.
    if check("the robot's gripper is not vertically aligned with the hammer"):
        robot.move_gripper("vertically aligned with the hammer")
    # If the gripper isn't around the hammer, close the gripper around the handle.
    if check("the robot's gripper is not around the hammer and the robot's gripper is open"):
        robot.move_gripper("near the hammer", close_gripper=True)
    # If the gripper is around the hammer, move the gripper above the nail.
    if check("the robot's gripper is around the hammer and the robot's gripper is not above the nail"):
        robot.move_gripper("above the nail")
    # If the gripper is above the nail, rotate the gripper to position the hammer correctly.
    if check("the robot's gripper is above the nail and the hammer is not positioned correctly"):
        robot.rotate_gripper("positioned correctly")
    # Move the gripper downwards to hit the nail with the hammer.
    if check("the hammer is not touching the nail"):
        robot.move_gripper("touching the nail")
    # Lift the gripper and release the hammer.
    if check("the robot's gripper is touching the nail"):
        robot.move_gripper("above the nail", open_gripper=True)
{'hammer': [("the robot's gripper is not vertically aligned with the hammer", "the robot's gripper is vertically aligned with the hammer"), ("the robot's gripper is not around the hammer and the robot's gripper is open", "the robot's gripper is near the hammer and the robot's gripper is closed"), ("the robot's gripper is around the hammer and the robot's gripper is not above the nail", "the robot's gripper is above the nail"), ("the robot's gripper is above the nail and the hammer is not positioned correctly", 'rotate_gripper positioned correctly'), ('the hammer is not touching the nail', "the robot's gripper is touching the nail"), ("the robot's gripper is touching the nail", "the robot's gripper is above the nail and the robot's gripper is open"), ("the robot's gripper is touching the nail", "the robot's gripper is the robot's gripper is above the nail and the robot's gripper is open")]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not vertically aligned with the hammer", 'push the gripper into the puck'), ("the robot's gripper is not around the hammer and the robot's gripper is open", 'push the gripper into the puck'), ("the robot's gripper is around the hammer and the robot's gripper is not above the hammer", 'put the gripper above the puck'), ("the robot's gripper is above the hammer and hammer is not touching the table", 'drop gripper around puck'), ('hammer is not touching the table', 'push the gripper into the puck'), ("the robot's gripper is around the hammer", 'put the gripper above the puck'), ("the robot's gripper is around the hammer", 'put the gripper above the puck')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not vertically aligned with the hammer", 'push the gripper into the puck'), ("the robot's gripper is not around the hammer and the robot's gripper is open", 'push the gripper into the puck'), ("the robot's gripper is around the hammer and the robot's gripper is not above the hammer", 'put the gripper above the puck'), ("the robot's gripper is above the hammer and hammer is not touching the table", 'drop gripper around puck'), ('hammer is not touching the table', 'push the gripper into the puck'), ("the robot's gripper is around the hammer", 'put the gripper above the puck'), ("the robot's gripper is around the hammer", 'put the gripper above the puck')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not vertically aligned with the hammer", 'push the gripper into the puck'), ("the robot's gripper is not around the hammer and the robot's gripper is open", 'push the gripper into the puck'), ("the robot's gripper is around the hammer and the robot's gripper is not above the hammer", 'put the gripper above the puck'), ("the robot's gripper is above the hammer and hammer is not touching the table", 'drop gripper around puck'), ('hammer is not touching the table', 'push the gripper into the puck'), ("the robot's gripper is around the hammer", 'put the gripper above the puck'), ("the robot's gripper is around the hammer", 'put the gripper above the puck')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.9577792323365308
Success rates:
{
 "hammer": 0.0
}
