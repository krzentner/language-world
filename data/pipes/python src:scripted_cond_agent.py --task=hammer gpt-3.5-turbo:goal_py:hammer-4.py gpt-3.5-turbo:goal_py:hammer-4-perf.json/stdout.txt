['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py
# Steps:
#  1. Pick up the hammer
#  2. Position the hammer above the nail
#  3. Rotate the wrist to hit the nail
#  4. Lift the hammer back up
# First, put the gripper around the hammer handle and lift it off the table.
if check("the robot's gripper is not around the hammer handle"):
    robot.move_gripper("around the hammer handle", close_gripper=True)
# Once the gripper is around the hammer handle, lift it towards the nail.
if check("the robot's gripper is not above the nail"):
    robot.move_gripper("above the nail")
# Rotate the gripper to hit the nail.
if check("the robot's gripper is above the nail and the wrist is not rotated correctly"):
    robot.rotate_wrist("correct rotation")
# Bring the hammer back up.
if check("the robot's gripper is above the nail and the wrist is rotated correctly"):
    robot.move_gripper("above the nail", close_gripper=False)
{'hammer': [("the robot's gripper is not around the hammer handle", "the robot's gripper is around the hammer handle and the robot's gripper is closed"), ("the robot's gripper is not above the nail", "the robot's gripper is above the nail"), ("the robot's gripper is above the nail and the wrist is not rotated correctly", 'rotate_wrist correct rotation')]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not around the hammer", 'drop gripper around puck'), ("the robot's gripper is not above the hammer", 'put the gripper above the puck'), ("the robot's gripper is above the hammer and hammer is not touching the table", 'move gripper to right of window handle')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not around the hammer", 'drop gripper around puck'), ("the robot's gripper is not above the hammer", 'put the gripper above the puck'), ("the robot's gripper is above the hammer and hammer is not touching the table", 'move gripper to right of window handle')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not around the hammer", 'drop gripper around puck'), ("the robot's gripper is not above the hammer", 'put the gripper above the puck'), ("the robot's gripper is above the hammer and hammer is not touching the table", 'move gripper to right of window handle')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 1.0155210935783852
Success rates:
{
 "hammer": 0.0
}
