['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py

    # Steps:
    #  1. Position the hammer above the nail
    #  2. Move the hammer down onto the nail
    #  3. Swing the hammer downward
    # Put the hammer roughly above the nail.
    if check("the hammer is not above the nail and the robot's gripper is not above the hammer"):
        robot.put("hammer above nail")
    # Rotate the gripper around the hammer, so that it will move in a straight
    # line.
    if check("the robot's gripper is not above the hammer and the robot's gripper is not around the hammer"):
        robot.drop("gripper around hammer")
    # Strike the nail with the hammer, angled such that it will stick into the
    # nail.
    if check("the robot's gripper is above the hammer"):
        robot.strike("hammer downward")
{'hammer': [("the hammer is not above the nail and the robot's gripper is not above the hammer", 'put hammer above nail'), ("the robot's gripper is not above the hammer and the robot's gripper is not around the hammer", 'drop gripper around hammer'), ("the robot's gripper is above the hammer", 'strike hammer downward')]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the hammer is not above the robot's gripper and the robot's gripper is not above the hammer", 'place puck at goal'), ("the robot's gripper is not above the hammer and the robot's gripper is not around the hammer", 'drop gripper around puck'), ("the robot's gripper is above the hammer", 'slide the puck to the goal')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the hammer is not above the robot's gripper and the robot's gripper is not above the hammer", 'place puck at goal'), ("the robot's gripper is not above the hammer and the robot's gripper is not around the hammer", 'drop gripper around puck'), ("the robot's gripper is above the hammer", 'slide the puck to the goal')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.01
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the hammer is not above the robot's gripper and the robot's gripper is not above the hammer", 'place puck at goal'), ("the robot's gripper is not above the hammer and the robot's gripper is not around the hammer", 'drop gripper around puck'), ("the robot's gripper is above the hammer", 'slide the puck to the goal')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.8202354905865029
Success rates:
{
 "hammer": 0.01
}
