['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py.md
# dial-turn: turn the dial
# def dial_turn(robot):
    # Steps:
    # 1. Align the gripper with the dial
    # 2. Put the gripper on the dial and pinch it
    # 3. Turn the dial to the required degree
    # 4. Release the dial
    # We need to line up the gripper with the dial before grabbing it.
    if check("the gripper is not aligned with the dial"):
        robot.put("gripper on top of the dial")
    # If the gripper is aligned with the dial and not holding it, pinch the dial.
    if check("the gripper is aligned with the dial and not holding it"):
        robot.pinch("the dial")
    # Once the gripper has held the dial, we can turn it to the required degree.
    if check("the gripper is holding the dial but not at the desired degree"):
        robot.turn("the dial to the required degree")
    # Finally, we release the dial.
    if check("the gripper is holding the dial"):
        robot.release("the dial")
{'dial-turn': [('the gripper is not aligned with the dial', 'put gripper on top of the dial'), ('the gripper is aligned with the dial and not holding it', 'pinch the dial'), ('the gripper is holding the dial but not at the desired degree', 'turn the dial to the required degree'), ('the gripper is holding the dial', 'release the dial')]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not forward aligned with the dial", 'push the gripper into the puck'), ("the robot's gripper is forward aligned with the dial and dial is not touching the table", 'push the gripper into the puck'), ("the robot's gripper is closed and the dial is not near the robot's gripper", 'slide the puck to the goal'), ("the robot's gripper is behind the dial", 'put the gripper above the puck')], env_name='dial-turn', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not forward aligned with the dial", 'push the gripper into the puck'), ("the robot's gripper is forward aligned with the dial and dial is not touching the table", 'push the gripper into the puck'), ("the robot's gripper is closed and the dial is not near the robot's gripper", 'slide the puck to the goal'), ("the robot's gripper is behind the dial", 'put the gripper above the puck')], env_name='dial-turn', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 1.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not forward aligned with the dial", 'push the gripper into the puck'), ("the robot's gripper is forward aligned with the dial and dial is not touching the table", 'push the gripper into the puck'), ("the robot's gripper is closed and the dial is not near the robot's gripper", 'slide the puck to the goal'), ("the robot's gripper is behind the dial", 'put the gripper above the puck')], env_name='dial-turn', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 1.8778115277922771
Success rates:
{
 "dial-turn": 1.0
}
