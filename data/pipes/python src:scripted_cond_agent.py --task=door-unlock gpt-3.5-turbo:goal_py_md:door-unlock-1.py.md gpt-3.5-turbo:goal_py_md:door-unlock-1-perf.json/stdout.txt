['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py.md
# door-unlock: turn the dial on the door
# def door_unlock(robot):
    # Steps:
    #  1. Put gripper on dial
    #  2. Turn dial to the unlocked position
    # The robot needs to turn the dial to the right position to unlock the door.
    # If the gripper is not above the dial, move it there.
    if check("the robot's gripper is not above the door dial"):
        robot.move_gripper("above the door dial")
    # If the gripper is above the dial but not around it, move it around the dial.
    if check("the robot's gripper is above the door dial and the robot's gripper is open"):
        robot.move_gripper("around the door dial", close_gripper=True)
    # Move the dial to the unlocked position (one full turn to the right).
    if check("the robot's gripper is around the door dial and not in the unlocked position"):
        robot.move_gripper("one full turn to the right")
{'door-unlock': [("the robot's gripper is not above the door dial", "the robot's gripper is above the door dial"), ("the robot's gripper is above the door dial and the robot's gripper is open", "the robot's gripper is around the door dial and the robot's gripper is closed"), ("the robot's gripper is around the door dial and not in the unlocked position", "the robot's gripper is near one full turn to the right")]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the door's lock", 'put the gripper above the puck'), ("the robot's gripper is above the door's lock and the robot's gripper is open", 'drop gripper around puck'), ("the robot's gripper is around the door's lock and the robot's gripper is open", 'push the gripper into the puck')], env_name='door-unlock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the door's lock", 'put the gripper above the puck'), ("the robot's gripper is above the door's lock and the robot's gripper is open", 'drop gripper around puck'), ("the robot's gripper is around the door's lock and the robot's gripper is open", 'push the gripper into the puck')], env_name='door-unlock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 1.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the door's lock", 'put the gripper above the puck'), ("the robot's gripper is above the door's lock and the robot's gripper is open", 'drop gripper around puck'), ("the robot's gripper is around the door's lock and the robot's gripper is open", 'push the gripper into the puck')], env_name='door-unlock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 3.1405436438824874
Success rates:
{
 "door-unlock": 1.0
}
