['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py.md


Here's the code to do the hammer task: 
```
# hammer: hit the nail with the hammer
# def hammer(robot):
    if check("the robot's gripper is not above the nail"):
        robot.place("gripper above the nail")
    if check("the robot's gripper is not horizontally aligned with the nail"):
        robot.rotate("gripper to horizontally align with the nail")
    if check("the robot's gripper is horizontally aligned with the nail and the robot's gripper is not close to the nail"):
        robot.approach("gripper closer to nail")
    if check("the robot's gripper is close to the nail and the gripper is open"):
        robot.close("gripper on hammer")
    if check("the robot's gripper is closed around the hammer"):
        robot.hit("nail with hammer")
```
{'hammer': [("the robot's gripper is not above the nail", 'place gripper above the nail'), ("the robot's gripper is not horizontally aligned with the nail", 'rotate gripper to horizontally align with the nail'), ("the robot's gripper is horizontally aligned with the nail and the robot's gripper is not close to the nail", 'approach gripper closer to nail'), ("the robot's gripper is close to the nail and the gripper is open", 'close gripper on hammer'), ("the robot's gripper is closed around the hammer", 'hit nail with hammer')]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the hammer", 'place gripper above puck'), ("the robot's gripper is not horizontally aligned with the hammer", 'put the gripper in front of the drawer'), ("the robot's gripper is horizontally aligned with the hammer and the robot's gripper is not left of the hammer", 'put the gripper above the puck'), ("the robot's gripper is left of the hammer and the robot's gripper is open", 'close gripper around puck'), ("the robot's gripper is not around the hammer", 'grab peg')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the hammer", 'place gripper above puck'), ("the robot's gripper is not horizontally aligned with the hammer", 'put the gripper in front of the drawer'), ("the robot's gripper is horizontally aligned with the hammer and the robot's gripper is not left of the hammer", 'put the gripper above the puck'), ("the robot's gripper is left of the hammer and the robot's gripper is open", 'close gripper around puck'), ("the robot's gripper is not around the hammer", 'grab peg')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the hammer", 'place gripper above puck'), ("the robot's gripper is not horizontally aligned with the hammer", 'put the gripper in front of the drawer'), ("the robot's gripper is horizontally aligned with the hammer and the robot's gripper is not left of the hammer", 'put the gripper above the puck'), ("the robot's gripper is left of the hammer and the robot's gripper is open", 'close gripper around puck'), ("the robot's gripper is not around the hammer", 'grab peg')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 1.024466554518234
Success rates:
{
 "hammer": 0.0
}
