['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py.md


# dial-turn: turn the dial
# def dial_turn(robot):
    # Steps:
    #  1. Put gripper directly above the dial
    #  2. Drop gripper around the dial
    #  3. Turn the dial
    # First, we need to put the robot's gripper directly above the dial.
    if check("the robot's gripper is not directly above the dial"):
        robot.move_gripper("directly above the dial")
    # Now that the gripper is above the dial, drop the gripper around it to
    # hold and turn it.
    if check("the robot's gripper is not around the dial"):
        robot.move_gripper("near the dial", close_gripper=True)
    # While holding the dial, we can turn it to the desired position.
    if check("the robot's gripper is around the dial"):
        robot.move_gripper("close to the desired position")
{'dial-turn': [("the robot's gripper is not directly above the dial", "the robot's gripper is directly above the dial"), ("the robot's gripper is not around the dial", "the robot's gripper is near the dial and the robot's gripper is closed"), ("the robot's gripper is around the dial", "the robot's gripper is near close to the desired position")]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the dial", 'put the gripper above the puck'), ("the robot's gripper is not around the dial", 'push the gripper into the puck'), ("the robot's gripper is around the dial", 'put the gripper in front of the drawer')], env_name='dial-turn', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the dial", 'put the gripper above the puck'), ("the robot's gripper is not around the dial", 'push the gripper into the puck'), ("the robot's gripper is around the dial", 'put the gripper in front of the drawer')], env_name='dial-turn', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the dial", 'put the gripper above the puck'), ("the robot's gripper is not around the dial", 'push the gripper into the puck'), ("the robot's gripper is around the dial", 'put the gripper in front of the drawer')], env_name='dial-turn', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.0
Success rates:
{
 "dial-turn": 0.0
}
