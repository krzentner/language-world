['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py.md
# pick-place-wall: pick up the puck and hold it at the target location with a short wall in the way
# def pick_place_wall(robot):
    # Steps:
    # 1. Put gripper roughly above puck, taking into account the wall
    # 2. Move gripper behind wall
    # 3. Drop gripper around puck
    # 4. Close gripper around puck
    # 5. Move puck to goal around the wall
    # We need to first put the gripper roughly above the puck, while taking into account
    # the wall being in the way. To do this, we'll need to calculate the position of the puck
    # relative to the location of the wall and adjust accordingly.
    if check("the robot's gripper is not above the puck with the wall in the way"):
        puck_pos = robot.detect("puck position")
        wall_pos = robot.detect("wall position")
        # If the puck is behind the wall, then we can just put the gripper above the puck normally
        if puck_pos[0] < wall_pos[0]:
            robot.move("gripper to puck position")
        # If the puck is in front of the wall, then we need to calculate a new position above the puck
        # that takes into account the presence of the wall.
        else:
            new_puck_pos = (puck_pos[0], wall_pos[1] - robot.gripper_width - 0.01)
            robot.move("gripper to new puck position")
    # Next, we need to move the gripper behind the wall to be able to grab the puck.
    if check("the gripper is not behind the wall"):
        wall_pos = robot.detect("wall position")
        robot.move("gripper behind the wall at {}".format(wall_pos[0]))
    # Once the gripper is behind the wall, we can grab the puck and move it to the goal.
    # The rest of the steps are the same as in the regular pick-place task.
    if check("the robot's gripper is not around the puck and the robot's gripper is behind the wall"):
        robot.drop("gripper around puck")
    if check("the robot's gripper is near the puck and the puck is below the robot's gripper"):
        robot.close("gripper around puck")
    if check("the robot's gripper is above the puck and the robot's gripper is closed"):
        wall_pos = robot.detect("wall position")
        goal_pos = robot.detect("goal position")
        # If the goal is to the right of the wall, we need to move the puck
        # around the wall to reach it.
        if goal_pos[0] < wall_pos[0]:
            robot.slide("puck to goal")
        # If the goal is to the left of the wall, we need to move the gripper
        # and puck to the other side of the wall before moving the puck to the goal.
        else:
            robot.move("gripper to other side of wall")
            robot.slide("puck to goal")
{'pick-place-wall': [("the robot's gripper is not above the puck with the wall in the way", 'detect puck position'), ('the gripper is not behind the wall', 'detect wall position'), ("the robot's gripper is not around the puck and the robot's gripper is behind the wall", 'drop gripper around puck'), ("the robot's gripper is near the puck and the puck is below the robot's gripper", 'close gripper around puck'), ("the robot's gripper is above the puck and the robot's gripper is closed", 'detect wall position')]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the puck and wall is near the puck", 'slide the puck to the goal'), ("the robot's gripper is not behind wall", 'pull door open'), ("the robot's gripper is not around the puck and the robot's gripper is behind wall", 'drop gripper around puck'), ("the robot's gripper is near the puck and the puck is below the robot's gripper", 'close gripper around puck'), ("the robot's gripper is above the puck and the robot's gripper is closed", 'pull door open')], env_name='pick-place-wall', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the puck and wall is near the puck", 'slide the puck to the goal'), ("the robot's gripper is not behind wall", 'pull door open'), ("the robot's gripper is not around the puck and the robot's gripper is behind wall", 'drop gripper around puck'), ("the robot's gripper is near the puck and the puck is below the robot's gripper", 'close gripper around puck'), ("the robot's gripper is above the puck and the robot's gripper is closed", 'pull door open')], env_name='pick-place-wall', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the puck and wall is near the puck", 'slide the puck to the goal'), ("the robot's gripper is not behind wall", 'pull door open'), ("the robot's gripper is not around the puck and the robot's gripper is behind wall", 'drop gripper around puck'), ("the robot's gripper is near the puck and the puck is below the robot's gripper", 'close gripper around puck'), ("the robot's gripper is above the puck and the robot's gripper is closed", 'pull door open')], env_name='pick-place-wall', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.0
Success rates:
{
 "pick-place-wall": 0.0
}
