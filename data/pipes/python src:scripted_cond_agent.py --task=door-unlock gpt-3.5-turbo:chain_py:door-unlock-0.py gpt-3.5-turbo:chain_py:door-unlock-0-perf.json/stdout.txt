['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py
# Steps:
    #  1. Put gripper around the dial
    #  2. Turn the dial to the correct combination
    # First, put the gripper around the dial.
    if check("the robot's gripper is not around the dial"):
        robot.drop("gripper around dial")
    # Turn the dial. We need to keep track of the current number, so we can
    # understand how far we've turned it.
    # We can't assume how many spins the dial takes to rotate or the direction
    # of rotation, so we'll need to experimentally figure that out and adjust
    # the steps accordingly.
    current_number = 0
    while current_number < combination[0]:
        robot.turn("dial right")
        current_number += 1
    while current_number > combination[0]:
        robot.turn("dial left")
        current_number -= 1
    # Repeat these steps for the second and third digits in the combination.
    current_number = 0
    while current_number < combination[1]:
        robot.turn("dial right")
        current_number += 1
    while current_number > combination[1]:
        robot.turn("dial left")
        current_number -= 1
    current_number = 0
    while current_number < combination[2]:
        robot.turn("dial right")
        current_number += 1
    while current_number > combination[2]:
        robot.turn("dial left")
        current_number -= 1
    # Once the dial is set to the correct combination, the door should unlock.
    robot.pull("door open")
{'door-unlock': [("the robot's gripper is not around the dial", 'drop gripper around dial')]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not around the door's lock", 'drop gripper around puck')], env_name='door-unlock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not around the door's lock", 'drop gripper around puck')], env_name='door-unlock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 1.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not around the door's lock", 'drop gripper around puck')], env_name='door-unlock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 3.9610247357693997
Success rates:
{
 "door-unlock": 1.0
}
