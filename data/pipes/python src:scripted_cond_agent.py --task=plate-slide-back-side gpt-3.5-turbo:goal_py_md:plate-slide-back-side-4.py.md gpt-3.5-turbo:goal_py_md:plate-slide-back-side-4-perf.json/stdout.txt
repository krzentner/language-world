['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py.md
Here is the program to perform the `plate-slide-back-side` task:

```
# plate-slide-back-side: slide the plate back sideways into the target location
# def plate_slide_back_side(robot):
    # Steps:
    #  1. Put gripper above the plate
    #  2. Grab the plate with the gripper
    #  3. Slide the plate back sideways into the target location
    # First, put the gripper above the plate.
    if check("the robot's gripper is not vertically aligned with the plate"):
        robot.move_gripper("vertically aligned with the plate")
    # If the plate is not yet gripped, move the gripper down and close the gripper
    if check("the plate is not gripped"):
        robot.move_gripper("above the plate", close_gripper=True)
    # If the plate is gripped, slide it back to the target location
    if check("the plate is gripped and robot's gripper is not near the target"):
        robot.move_gripper("near the target location")
```

This program assumes that the robot is already at the initial location of the plate, and that the target location is to the side and slightly back of the initial location. It also assumes that the gripper is parallel to the surface that the plate is sitting on. If any of these assumptions are not true, the program may need to be modified accordingly.
{'plate-slide-back-side': [("the robot's gripper is not vertically aligned with the plate", "the robot's gripper is vertically aligned with the plate"), ('the plate is not gripped', "the robot's gripper is above the plate and the robot's gripper is closed"), ("the plate is gripped and robot's gripper is not near the target", "the robot's gripper is near the target location")]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not vertically aligned with the plate", 'push the gripper into the puck'), ("the plate is near the robot's gripper", 'put the gripper above the puck'), ("the plate is near the robot's gripper and the robot's gripper is not near the plate", 'push the gripper into the puck')], env_name='plate-slide-back-side', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not vertically aligned with the plate", 'push the gripper into the puck'), ("the plate is near the robot's gripper", 'put the gripper above the puck'), ("the plate is near the robot's gripper and the robot's gripper is not near the plate", 'push the gripper into the puck')], env_name='plate-slide-back-side', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not vertically aligned with the plate", 'push the gripper into the puck'), ("the plate is near the robot's gripper", 'put the gripper above the puck'), ("the plate is near the robot's gripper and the robot's gripper is not near the plate", 'push the gripper into the puck')], env_name='plate-slide-back-side', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 1.4938271901774962
Success rates:
{
 "plate-slide-back-side": 0.0
}
