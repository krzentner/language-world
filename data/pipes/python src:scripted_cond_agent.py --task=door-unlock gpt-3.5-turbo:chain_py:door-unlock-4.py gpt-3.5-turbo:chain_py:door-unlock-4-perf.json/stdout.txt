['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py
# Steps:
    #  1. Put gripper around the door dial
    #  2. Turn the dial to the right
    #  3. Turn the dial to the left
    #  4. Turn the dial to the right again
    # Put the gripper around the door dial.
    if check("the robot's gripper is not around the door dial"):
        robot.grab("door dial")
    # Turn the dial to the right.
    if check("the dial is not turned to the right"):
        robot.turn("dial to the right")
    # Turn the dial to the left.
    if check("the dial is not turned to the left"):
        robot.turn("dial to the left")
    # Turn the dial to the right again.
    if check("the dial is not turned to the right again"):
        robot.turn("dial to the right again")
{'door-unlock': [("the robot's gripper is not around the door dial", 'grab door dial'), ('the dial is not turned to the right', 'turn dial to the right'), ('the dial is not turned to the left', 'turn dial to the left'), ('the dial is not turned to the right again', 'turn dial to the right again')]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not around the door's lock", 'grab peg'), ("the door's lock is not left of the robot's gripper", 'slide the puck to the goal'), ("the door's lock is not left of the robot's gripper", 'slide the puck to the goal'), ("the door's lock is not left of the robot's gripper", 'slide the puck to the goal')], env_name='door-unlock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not around the door's lock", 'grab peg'), ("the door's lock is not left of the robot's gripper", 'slide the puck to the goal'), ("the door's lock is not left of the robot's gripper", 'slide the puck to the goal'), ("the door's lock is not left of the robot's gripper", 'slide the puck to the goal')], env_name='door-unlock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not around the door's lock", 'grab peg'), ("the door's lock is not left of the robot's gripper", 'slide the puck to the goal'), ("the door's lock is not left of the robot's gripper", 'slide the puck to the goal'), ("the door's lock is not left of the robot's gripper", 'slide the puck to the goal')], env_name='door-unlock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.9979400180063309
Success rates:
{
 "door-unlock": 0.0
}
