['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py.md


Steps:
  1. Put gripper directly above the dial
  2. Drop gripper to the left of the dial
  3. Turn the dial clockwise
  4. Stop turning dial when it stops of its own accord 

# door-unlock: turn the dial on the door
# def door_unlock(robot):
    # Steps:
    #  1. Put gripper directly above the dial
    if check("the robot's gripper is not vertically aligned with the dial"):
        robot.move_gripper("vertically aligned with the dial")
    #  2. Drop gripper to the left of the dial
    if check("the robot's gripper is not left of the dial"):
        robot.move_gripper("left of the dial", close_gripper=True)
    #  3. Turn the dial clockwise
    if check("the robot's gripper is left of the dial"):
        robot.move_gripper("right")
    #  4. Stop turning dial when it stops of its own accord
    if check("the dial is turning on its own accord"):
        robot.stop_gripper()
{'door-unlock': [("the robot's gripper is not vertically aligned with the dial", "the robot's gripper is vertically aligned with the dial"), ("the robot's gripper is not left of the dial", "the robot's gripper is left of the dial and the robot's gripper is closed"), ("the robot's gripper is left of the dial", "the robot's gripper is near right")]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not vertically aligned with the door's lock", 'put the gripper in front of the drawer'), ("the robot's gripper is not left of the door's lock", 'push the gripper into the puck'), ("the robot's gripper is left of the door's lock", 'put the gripper in front of the drawer')], env_name='door-unlock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not vertically aligned with the door's lock", 'put the gripper in front of the drawer'), ("the robot's gripper is not left of the door's lock", 'push the gripper into the puck'), ("the robot's gripper is left of the door's lock", 'put the gripper in front of the drawer')], env_name='door-unlock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not vertically aligned with the door's lock", 'put the gripper in front of the drawer'), ("the robot's gripper is not left of the door's lock", 'push the gripper into the puck'), ("the robot's gripper is left of the door's lock", 'put the gripper in front of the drawer')], env_name='door-unlock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.7684185094099121
Success rates:
{
 "door-unlock": 0.0
}
