['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py
# Steps:
    #  1. Put gripper around door knob
    #  2. Turn dial on the door
    # First, put the gripper around the door knob.
    if check("the robot's gripper is not around the door knob"):
        robot.grab("door knob")
    # If the dial is not lined up with the desired position, turn it.
    if check("the dial is not in the desired position"):
        robot.turn("dial")
    # If the dial is now in the desired position, we're done.
    if check("the dial is in the desired position"):
        robot.release("door knob")

# object-placement: place an object at the desired location
# def object_placement(robot):
    # Steps:
    #  1. Put gripper next to object
    #  2. Grab object with gripper
    #  3. Lift object
    #  4. Move object to desired location
    #  5. Lower object
    # First, put the gripper roughly next to the object.
    if check("the robot's gripper is not next to the object"):
        robot.move("gripper next to object")
    # If the gripper is next to the object, try grabbing it.
    if check("the robot's gripper is next to the object and the robot's gripper is open"):
        robot.grab("object")
    # If the gripper has grasped the object, try lifting it.
    if check("the robot's gripper is holding the object and the object is not lifted"):
        robot.lift("object")
    # If the gripper is holding the object and it's lifted, try moving it to the
    # desired location.
    if check("the robot's gripper is holding the object and the object is lifted and the object is not at the desired location"):
        robot.move("object to desired location")
    # If the gripper is holding the object and it's at the desired location,
    # lower it.
    if check("the robot's gripper is holding the object and the object is at the desired location and the object is not lowered"):
        robot.lower("object")

# object-retrieval: retrieve an object from a specific location
# def object_retrieval(robot):
    # Steps:
    #  1. Put gripper next to object
    #  2. Grab object with gripper
    #  3. Move object to desired location
    # First, put the gripper roughly next to the object.
    if check("the robot's gripper is not next to the object"):
        robot.move("gripper next to object")
    # If the gripper is next to the object, try grabbing it.
    if check("the robot's gripper is next to the object and the robot's gripper is open"):
        robot.grab("object")
    # If the gripper has grasped the object, try moving it to the desired
    # location.
    if check("the robot's gripper is holding the object and the object is not at the desired location"):
        robot.move("object to desired location")
{'object-placement': [("the robot's gripper is not next to the object", 'move gripper next to object'), ("the robot's gripper is next to the object and the robot's gripper is open", 'grab object'), ("the robot's gripper is holding the object and the object is not lifted", 'lift object'), ("the robot's gripper is holding the object and the object is lifted and the object is not at the desired location", 'move object to desired location'), ("the robot's gripper is holding the object and the object is at the desired location and the object is not lowered", 'lower object')], 'object-retrieval': [("the robot's gripper is not next to the object", 'move gripper next to object'), ("the robot's gripper is next to the object and the robot's gripper is open", 'grab object'), ("the robot's gripper is holding the object and the object is not at the desired location", 'move object to desired location')], 'door-lock': [("the robot's gripper is not around the door knob", 'grab door knob'), ('the dial is not in the desired position', 'turn dial'), ('the dial is in the desired position', 'release door knob')]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not around the door's lock", 'grab peg'), ("the door's lock is not behind the robot's gripper", 'push drawer closed'), ("the door's lock is behind the robot's gripper", 'grab peg')], env_name='door-lock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not around the door's lock", 'grab peg'), ("the door's lock is not behind the robot's gripper", 'push drawer closed'), ("the door's lock is behind the robot's gripper", 'grab peg')], env_name='door-lock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not around the door's lock", 'grab peg'), ("the door's lock is not behind the robot's gripper", 'push drawer closed'), ("the door's lock is behind the robot's gripper", 'grab peg')], env_name='door-lock', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 2.889263647448071
Success rates:
{
 "door-lock": 0.0
}
