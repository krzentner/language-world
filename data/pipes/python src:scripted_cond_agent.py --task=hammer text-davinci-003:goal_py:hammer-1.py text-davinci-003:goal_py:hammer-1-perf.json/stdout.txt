['assembly', 'basketball', 'bin-picking', 'box-close', 'button-press-topdown', 'button-press-topdown-wall', 'button-press', 'button-press-wall', 'coffee-button', 'coffee-pull', 'coffee-push', 'dial-turn', 'disassemble', 'door-close', 'door-lock', 'door-open', 'door-unlock', 'hand-insert', 'drawer-close', 'drawer-open', 'faucet-open', 'faucet-close', 'hammer', 'handle-press-side', 'handle-press', 'handle-pull-side', 'handle-pull', 'lever-pull', 'peg-insert-side', 'pick-place-wall', 'pick-out-of-hole', 'reach', 'push-back', 'push', 'pick-place', 'plate-slide', 'plate-slide-side', 'plate-slide-back', 'plate-slide-back-side', 'peg-unplug-side', 'soccer', 'stick-push', 'stick-pull', 'push-wall', 'reach-wall', 'shelf-place', 'sweep-into', 'sweep', 'window-open', 'window-close']
['reach', 'push', 'pick-place', 'door-open', 'drawer-open', 'drawer-close', 'button-press-topdown', 'peg-insert-side', 'window-open', 'window-close']
py

    # Steps:
    #  1. Put gripper slightly above the nail
    #  2. Move the gripper down to the nail and close the gripper
    #  3. Hit the nail
    # Put the gripper slightly above the nail, so we can move down around it
    # and close the gripper.
    if check("the robot's gripper is not slightly above the nail"):
        robot.move_gripper("slightly above the nail")
    # Once the gripper is above the nail, move the gripper near it and close the
    # gripper. This will grab the nail and keep it between the gripper and the
    # hammer.
    if check("the robot's gripper is slightly above the nail and the robot's gripper is not closed"):
        robot.move_gripper("near the nail", close_gripper=True)
    # Finally, hit the nail. The robot doesn't need to be precise with where
    # it's hitting, so just move the gripper up and down.
    if check("the robot's gripper is near the nail and the robot's gripper is closed"):
        robot.move_gripper("above the nail")
        robot.move_gripper("below the nail")
{'hammer': [("the robot's gripper is not slightly above the nail", "the robot's gripper is slightly above the nail"), ("the robot's gripper is slightly above the nail and the robot's gripper is not closed", "the robot's gripper is near the nail and the robot's gripper is closed"), ("the robot's gripper is near the nail and the robot's gripper is closed", "the robot's gripper is above the nail")]}
Evaluating ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the hammer", 'put the gripper above the puck'), ("the robot's gripper is not above the hammer and the robot's gripper is closed", 'put the gripper in front of the drawer'), ("the robot's gripper is near the hammer and the robot's gripper is closed", 'put the gripper above the puck')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None)
Success rate for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the hammer", 'put the gripper above the puck'), ("the robot's gripper is not above the hammer and the robot's gripper is closed", 'put the gripper in front of the drawer'), ("the robot's gripper is near the hammer and the robot's gripper is closed", 'put the gripper above the puck')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.0
Avg timestep reward for ScriptedCondAgent(cond_to_scripted_skill=[("the robot's gripper is not above the hammer", 'put the gripper above the puck'), ("the robot's gripper is not above the hammer and the robot's gripper is closed", 'put the gripper in front of the drawer'), ("the robot's gripper is near the hammer and the robot's gripper is closed", 'put the gripper above the puck')], env_name='hammer', scripted_skill_choice_prob=1.0, skill_mix_base_weight=None) : 0.9613405032608007
Success rates:
{
 "hammer": 0.0
}
