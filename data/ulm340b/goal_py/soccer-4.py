
    # Steps:
    #  1. Put the gripper in front of the ball
    #  2. Close the gripper into the ball
    #  3. Move the ball to the target location
    # The robot can push the ball by moving the gripper in front of the ball
    # and closing the gripper.
    # If the gripper is not in front of the ball, move the gripper to the front
    # of the ball.
    if check("the robot's gripper is not vertically aligned with soccer ball"):
        robot.move_gripper("vertically aligned with the soccer ball")
    # If the gripper is in front of the ball, close the gripper into the ball.
    # Closing the gripper will force the ball to move.
    if check("the robot's gripper is in front of soccer ball"):
        robot.move_gripper("horizontally aligned with soccer ball", close_gripper=True)
    # If the gripper is closed on the ball, move it towards the target location.
    if check("the robot's gripper is near the soccer ball"):
        robot.move_gripper("above the target location", close_gripper=True)
[eod] [code]# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: resource_metric_source.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from monitor_sdk.model.container import metric_target_pb2 as monitor__sdk_dot_model_dot_container_dot_metric__target__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='resource_metric_source.proto',
  package='container',
  syntax='proto3',
  serialized_options=_b('ZCgo.easyops.local/contracts/protorepo-models/easyops/model/container'),
  serialized_pb=_b('\n\x1cresource_metric_source.proto\x12\tcontainer\x1a+monitor